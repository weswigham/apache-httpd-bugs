Received: (qmail 32937 invoked by uid 65534); 22 Mar 2000 09:10:57 -0000
Message-Id: <20000322091057.32936.qmail@locus.apache.org>
Date: 22 Mar 2000 09:10:57 -0000
From: Fabrice Gaillard <gaillard@ina.fr>
Reply-To: gaillard@ina.fr
To: submit@bugz.apache.org
Subject: patch to force caching of document from a selected host/domain
X-Send-Pr-Version: 3.110

>Number:         5912
>Category:       mod_proxy
>Synopsis:       patch to force caching of document from a selected host/domain
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    apache
>State:          open
>Class:          change-request
>Submitter-Id:   apache
>Arrival-Date:   Wed Mar 22 01:20:00 PST 2000
>Closed-Date:
>Last-Modified:
>Originator:     gaillard@ina.fr
>Release:        1.3.11
>Organization:
apache
>Environment:
all platforms
>Description:
For one of our project : EURODELPHES (see http://www.ina.fr/Recherche/Delphes/index.en.html) we need to force apache to cache certain type of documents generated by an XML to HTML cgi ("dpcgi").
These XML document are in fact static, but as we got them thru a cgi, the cache thinks they are dynamics and don't cache them.

Further, we need the cache to always return these data unconditionaly, without any conection with the server 

For that, I'll introduce the folowing modification :
1) add a forcecache parametter in ap_proxy_cache_update to force caching of documents from a given host (here : eurodelphes1.eurodelpes.org)
2)in proxy_cache.c , check for "dpcgi" in the url, and return the cached data unconditionaly without any cheking

These are very dirty hacks, but I think that with a better integration, they can be usefull to other people.

ideas :
Add two new parametters in the configuration file

ForceCache (or AlwaysCache) : specify a list of words or domains to cache even if document has no last modification date

AlwaysGetCacheData : specify a list of words or url parts to get localy from cache specify a list of words or domains  (sort of offline mode)

If you think It can be interesting, I'll can spend some more time to help.

>How-To-Repeat:

>Fix:


--- apache_1.3.11.dist/src/modules/proxy/mod_proxy.h    Tue Jan 11 15:13:44 2000
+++ apache_1.3.11.hack/src/modules/proxy/mod_proxy.h    Wed Mar 22 09:06:54 2000
@@ -268,7 +268,7 @@
 int ap_proxy_cache_check(request_rec *r, char *url, struct cache_conf *conf,
                      cache_req **cr);
 int ap_proxy_cache_update(cache_req *c, table *resp_hdrs,
-                      const int is_HTTP1, int nocache);
+                      const int is_HTTP1, int nocache, int forcecache);
 void ap_proxy_garbage_coll(request_rec *r);
 
 /* proxy_connect.c */


--- apache_1.3.11.dist/src/modules/proxy/proxy_ftp.c    Tue Jan 11 15:13:45 2000
+++ apache_1.3.11.hack/src/modules/proxy/proxy_ftp.c    Wed Feb 16 15:59:06 2000
@@ -1163,7 +1163,7 @@
            nocache = 1;
     }
 
-    i = ap_proxy_cache_update(c, resp_hdrs, 0, nocache);
+    i = ap_proxy_cache_update(c, resp_hdrs, 0, nocache, 0);
 
     if (i != DECLINED) {
        ap_pclosesocket(p, dsock);


--- apache_1.3.11.dist/src/modules/proxy/proxy_http.c   Tue Jan 11 15:13:45 2000
+++ apache_1.3.11.hack/src/modules/proxy/proxy_http.c   Wed Feb 16 15:52:19 2000
@@ -63,6 +63,7 @@
 #include "http_core.h"
 #include "util_date.h"
 
+const char *eurodelphes_server = "eurodelphes1.eurodelphes.org";
 /*
  * Canonicalise http-like URLs.
  *  scheme is the scheme for the URL
@@ -196,6 +197,7 @@
     struct noproxy_entry *npent = (struct noproxy_entry *) conf->noproxies->elts;
     struct nocache_entry *ncent = (struct nocache_entry *) conf->nocaches->elts;
     int nocache = 0;
+    int forcecache = 0;
 
     memset(&server, '\0', sizeof(server));
     server.sin_family = AF_INET;
@@ -476,7 +478,10 @@
            nocache = 1;
     }
 
-    i = ap_proxy_cache_update(c, resp_hdrs, !backasswards, nocache);
+    if(strstr(desthost, eurodelphes_server) !=NULL)
+       forcecache = 1;
+
+    i = ap_proxy_cache_update(c, resp_hdrs, !backasswards, nocache, forcecache);
     if (i != DECLINED) {
        ap_bclose(f);
        return i;


--- apache_1.3.11.dist/src/modules/proxy/proxy_cache.c  Thu Dec  9 00:02:43 1999
+++ apache_1.3.11.hack/src/modules/proxy/proxy_cache.c  Mon Feb 28 17:00:39 2000
@@ -85,6 +85,10 @@
     char file[HASH_LEN + 1];
 };
 
+const char *eurodelphesurl = "dpcgi";
+
+
+
 /* Poor man's 61 bit arithmetic */
 typedef struct {
     long lower;        /* lower 30 bits of result */
@@ -750,6 +754,29 @@
     if (cachefp == NULL)
        c->hdrs = ap_make_table(r->pool, 20);
 */
+
+    if (cachefp != NULL && strstr(url, eurodelphesurl) != NULL) {
+/* Ok, has been modified */
+        Explain0("EURODELPHES dpcgi");
+        r->status_line = strchr(c->resp_line, ' ') + 1;
+        r->status = c->status;
+        if (!r->assbackwards) {
+            ap_soft_timeout("proxy send headers", r);
+            ap_proxy_send_headers(r, c->resp_line, c->hdrs);
+            ap_kill_timeout(r);
+        }
+        ap_bsetopt(r->connection->client, BO_BYTECT, &zero);
+        r->sent_bodyct = 1;
+        if (!r->header_only)
+            ap_proxy_send_fb(cachefp, r, NULL);
+        ap_pclosef(r->pool, ap_bfileno(cachefp, B_WR));
+        return OK;
+    }
+
+
+
+
+
     /* FIXME: Shouldn't we check the URL somewhere? */
     now = time(NULL);
 /* Ok, have we got some un-expired data? */
@@ -826,7 +853,7 @@
  *  otherwise, delete the old cached file and open a new temporary file
  */
 int ap_proxy_cache_update(cache_req *c, table *resp_hdrs,
-                      const int is_HTTP1, int nocache)
+                      const int is_HTTP1, int nocache, int forcecache)
 {
 #if defined(ULTRIX_BRAIN_DEATH) || defined(SINIX_D_RESOLVER_BUG)
   extern char *mktemp(char *template);
@@ -879,6 +906,8 @@
  */
 /* @@@ XXX FIXME: is the test "r->status != HTTP_MOVED_PERMANENTLY" correct?
  * or shouldn't it be "ap_is_HTTP_REDIRECT(r->status)" ? -MnKr */
+
+/*
     if ((r->status != HTTP_OK && r->status != HTTP_MOVED_PERMANENTLY && r->status != HTTP_NOT_MODIFIED) ||
        (expire != NULL && expc == BAD_DATE) ||
        (r->status == HTTP_NOT_MODIFIED && (c == NULL || c->fp == NULL)) ||
@@ -886,6 +915,16 @@
        r->header_only ||
        ap_table_get(r->headers_in, "Authorization") != NULL ||
        nocache) {
+*/
+
+    if ((r->status != HTTP_OK && r->status != HTTP_MOVED_PERMANENTLY && r->status != HTTP_NOT_MODIFIED) ||
+        (expire != NULL && expc == BAD_DATE) ||
+        (r->status == HTTP_NOT_MODIFIED && (c == NULL || c->fp == NULL)) ||
+        (r->status == HTTP_OK && lmods == NULL && is_HTTP1 && !forcecache) ||
+        r->header_only ||
+        ap_table_get(r->headers_in, "Authorization") != NULL ||
+        nocache) {
+
        Explain1("Response is not cacheable, unlinking %s", c->filename);
 /* close the file */
        if (c->fp != NULL) {

>Release-Note:
>Audit-Trail:
>Unformatted:
 [In order for any reply to be added to the PR database, you need]
 [to include <apbugs@Apache.Org> in the Cc line and make sure the]
 [subject line starts with the report component and number, with ]
 [or without any 'Re:' prefixes (such as "general/1098:" or      ]
 ["Re: general/1098:").  If the subject doesn't match this       ]
 [pattern, your message will be misfiled and ignored.  The       ]
 ["apbugs" address is not added to the Cc line of messages from  ]
 [the database automatically because of the potential for mail   ]
 [loops.  If you do not include this Cc, your reply may be ig-   ]
 [nored unless you are responding to an explicit request from a  ]
 [developer.  Reply only with text; DO NOT SEND ATTACHMENTS!     ]
 
 

