Received: (qmail 27273 invoked by uid 2012); 5 Nov 1997 03:04:08 -0000
Message-Id: <19971105030408.27272.qmail@hyperreal.org>
Date: 5 Nov 1997 03:04:08 -0000
From: Jake Hamby <jehamby@be.com>
Reply-To: jehamby@be.com
To: apbugs@hyperreal.org
Subject: MULTITHREADed code is not portable
X-Send-Pr-Version: 3.2

>Number:         1359
>Category:       general
>Synopsis:       MULTITHREADed code is not portable
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    apache
>State:          closed
>Class:          change-request
>Submitter-Id:   apache
>Arrival-Date:   Tue Nov  4 19:10:01 PST 1997
>Last-Modified:  Tue Nov  4 20:52:53 PST 1997
>Originator:     jehamby@be.com
>Organization:
>Release:        1.3b2
>Environment:
BeOS PR2 w/ mwcc
>Description:
BeOS sockets are currently "broken" in the same way as MS Windows:  they are not
equivalent to file descriptors, and aren't inherited across a fork().  While this may
be fixed in a future version of BeOS, it'd be nice to have Apache sooner than that.

To that end, I'm working on a port of Apache to BeOS using the MULTITHREAD code that was
written for Windows, and there are still a lot of WIN32 dependencies in the code.  I'd like
to coordinate with other developers who are working on getting this to work with
multithreaded UNIX, to separate out the Windows dependencies.

The first problem I ran into is thread-local storage, which is implemented (mostly in
main/http_main.c) with __declspec(thread) on WIN32.  Neither UNIX pthreads nor BeOS
offers such a simple fix.  In both cases, to minimize changes to the code, the affected
variables will probably need to be changed to a #define that calls a function to
retrieve a pointer to the allocated variable.  Something like:

#define my_pid (*(tls_my_pid()))

There are other problems in http_main.c as well:  the entire main() function has been gutted and reorganized in a not very portable fashion.  This should all be cleaned up.
>How-To-Repeat:

>Fix:
Yes, I'd like to coordinate with other developers interested in a multithreaded server
to fix the MULTITHREAD code in a portable fashion that works with UNIX and BeOS as well
as Win32
>Audit-Trail:
State-Changed-From-To: open-closed
State-Changed-By: marc
State-Changed-When: Tue Nov  4 20:52:53 PST 1997
State-Changed-Why:
The 1.3 threading code is an unfortunate mess in some regards.
Threading wasn't supposed to come into play until 2.0, but
Windows forced the issue because it is limited.  In theory,
most platforms (including Windows) could be done using
pthreads, but I wouldn't trust Windows that far.  The
model will be extended, likely with a good bit of redesign,
in 2.0.

There are currently no plans for such things in 1.3, and it
is getting a bit late for such changes in 1.3, but... we are
always willing to listen.  Best thing, if you can handle the volume,
is to join the development mailing list and raise the idea
for comment.  See the reference to the new-httpd list in
the ABOUT_APACHE file.
>Unformatted:

