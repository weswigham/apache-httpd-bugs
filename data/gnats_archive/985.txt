From apwww@hyperreal.org  Mon Aug 11 04:06:09 1997
Received: (from apwww@localhost)
	by hyperreal.org (8.8.5/8.8.5) id EAA22104;
	Mon, 11 Aug 1997 04:06:09 -0700 (PDT)
Message-Id: <199708111106.EAA22104@hyperreal.org>
Date: Mon, 11 Aug 1997 04:06:09 -0700 (PDT)
From: Christian Heinze <x@x.ray.net>
Reply-To: x@x.ray.net
To: apbugs@hyperreal.org
Subject: suggestion: check permissions via os-userbase
X-Send-Pr-Version: 3.2

>Number:         985
>Category:       general
>Synopsis:       suggestion: check permissions via os-userbase
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    apache
>State:          closed
>Class:          change-request
>Submitter-Id:   apache
>Arrival-Date:   Mon Aug 11 04:10:00 1997
>Originator:     x@x.ray.net
>Organization:
>Release:        any
>Environment:
Linux 2.0.30 i486
>Description:
i hope the bugreport page is correct for suggestions - at least that's what the faq said... :)

i've been struggeling with my apache httpd (*ix) for a while now and found out that there's a powerful feature missing.
a security-system that uses the os' userbase and permissions. i.e.:

e.g. if the following file is requested:
-rw-r-----   1 root     users       13722 Apr 25 01:28 /foo/bar.html
it can't be read by the default apache user, say wwwrun with nogroup. so apache sends a uid/pwd-query window and checks the input against the os' userbase. if the input was correct, apache changes to the user's uid and tries to execute the request with the user's permissions. if not -> uid/pwd-query window, and so on...
the same would work great with cgi-binaries (i'm dreaming of the possibilities i'd have together with web/cgi-interfaced sql-databases... *sigh* :) ).

i think such a totally os-transparent user/permission scheme would make life much easier, more comfortable and much more straightforward for httpd-admins...
>How-To-Repeat:

>Fix:
well, implement it as an option :%2
>Audit-Trail:
State-Changed-From-To: open-closed
State-Changed-By: marc
State-Changed-When: Mon Aug 11 09:04:01 PDT 1997
State-Changed-Why:
It is far more complicated than you make out to do so.
You then need to trust your web server with root and
Apache would have to run as root.  That isn't acceptable.
You also run into difficult issues with the (lack of) decent
security in web-based authentication.

We do have suexec, to let CGI scripts be run as users,
but it works slightly differently and is implemented by
an external wrapper that changes the uid.

Thanks for the suggestion.

From: Marc Slemko <marcs@znep.com>
To: Chris <x@reg.x.camelot.de>
Subject: Re: general/985: suggestion: check permissions via os-userbase
Date: Mon, 11 Aug 1997 12:00:22 -0600 (MDT)

 
 On Mon, 11 Aug 1997, Chris wrote:
 
 > hi!
 > 
 > > Synopsis: suggestion: check permissions via os-userbase
 > 
 > > It is far more complicated than you make out to do so.
 > 
 > i hope you're wrong... :)
 
 We have looked at this quite closely.
 
 > 
 > > You then need to trust your web server with root and
 > > Apache would have to run as root.  That isn't acceptable.
 > 
 > it's absolutely no doubt that the httpd shouldn't run as root, but
 > the httpd just had to start an instance of itself with the uid and
 > password given by the user - no need to run as root. this works with
 > a shell with uid != 0 -> call of su -> shell with uid == 0  -  so why
 > shouldn't that work for apache as well? :)
 
 Erm... you don't understand the way Apache works.  We can't just start a
 process as any user we want.  We have to be root.  To know what uid to
 start it as, we have to start serving the request.  That means we have to
 start serving the request as root.  With persistent connections, there can
 be more than one request per connection.  How are we supposed to switch
 uids in the middle of a connection?  We also don't create a new process
 for each request to begin with, since that is horribly inefficient. 
 Apache is a tad more complex than su. 
 
 Or are you trying to claim that Apache should run su?  The fact is that
 things are a _lot_ more complicated than you make out.  Saying "you should
 just be able to do x" is fine, but the problem is that it isn't that easy
 to actually do.
 
 [...]
 > oh, btw, IIS and as i've heard CERN both support this feature... but i
 > like apache quite much and i really dislike the idea to go back to CERN
 > again...
 
 Many programs support many features.  Hey, there is one web server that
 defaults to running all CGIs as root and makes it very difficult to change
 that.  That doesn't mean it is a good idea. 
 
 If you want to implement this, go ahead.  I am simply saying that it is
 not something we will likely be considering in the near future because it
 can not be done safely.
 
>Unformatted:

>Last-Modified:  Mon Aug 11 09:04:02 PDT 1997


