Received: (qmail 94687 invoked by uid 65534); 14 Feb 2000 16:33:33 -0000
Message-Id: <20000214163333.94686.qmail@locus.apache.org>
Date: 14 Feb 2000 16:33:33 -0000
From: Vladislav Malyshkin <mal@mail1.nai.net>
Reply-To: mal@mail1.nai.net
To: submit@bugz.apache.org
Subject: mod_jserv and httpd -HUP restarting problem
X-Send-Pr-Version: 3.110

>Number:         5755
>Category:       mod_jserv
>Synopsis:       mod_jserv and httpd -HUP restarting problem
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    jserv
>State:          open
>Class:          sw-bug
>Submitter-Id:   apache
>Arrival-Date:   Mon Feb 14 08:40:00 PST 2000
>Closed-Date:    
>Last-Modified:  Sun Apr  9 06:30:00 PDT 2000
>Originator:     mal@mail1.nai.net
>Release:        1.3.11
>Organization:
apache
>Environment:
RedHat 6.1 , JDK 1.1.7 and JDK 1.2 
>Description:
Using Apache 1.3.11 + ApacheJServ 1.1  on RedHat 6.1
(with either JDK 1.1.7 or JDK 1.2)
I have the following problem

I  installed ApacheJServ 1.1 which starts automatically by httpd.
It works fine untill first restart of HTTPD by command killall -HUP httpd
Since httpd received -HUP signal every few minutes I get a new message in httpd server error_log

ApacheJServ/1.1: Exception creating the server socket: java.net.BindException: Address already in use

It looks like httpd is trying to start JVM over and over again despite it is already running.
In several days I have hundreds of lines with this message

ApacheJServ/1.1: Exception creating the server socket: java.net.BindException: Address already in use

grep on ApacheJServ 1.1 source gives line 345 of JServ.java
ApacheJServ-1.1/src/java/org/apache/jserv/JServ.java:345:            fail("Exception creating the server socket", e);

I have never had any such problem with 
mod_jserv from ApacheJServ 1.0.
It started in ApacheJServ 1.1


>How-To-Repeat:
do
killall -HUP httpd
and after 20 minutes look to server logs
>Fix:
no
>Release-Note:
>Audit-Trail:

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: submit@bugz.apache.org, apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Mon, 14 Feb 2000 11:28:24 -0800 (PST)

 Instead of running 'killall -HUP httpd', try sending HUP to only the
 parent httpd process.  (If you used the RedHat RPM, IIRC this would be: 
 "kill -HUP `cat /var/run/httpd.pid`" -- though you may need to change the
 file location -- or perhaps something like '/etc/rc.d/apache reload'.)  If
 you send killall -HUP, the child httpd processes will recieve two HUP
 signals.  That may (or may not) be sufficient to cause problems of some
 sort or another with JServ ...
 
 Generally, the error which you've described occurs when you're using
 automatic mode, and mod_jserv fails to tell the JVM to terminate; I'm not
 sure what could have changed between 1.0 and 1.1, but it's certainly
 possible that something changed which would affect timing slightly. 
 
 You can, of course, turn off automatic mode, which would solve this
 problem -- but then you need to do process management for the JVM
 yourself. 
 
 good luck --
 
 Ed
 
 
 
 On 14 Feb 2000, Vladislav Malyshkin wrote:
 
 [snip]
 > I have the following problem
 > 
 > I  installed ApacheJServ 1.1 which starts automatically by httpd.
 > It works fine untill first restart of HTTPD by command killall -HUP httpd
 > Since httpd received -HUP signal every few minutes I get a new message in httpd server error_log
 > 
 > ApacheJServ/1.1: Exception creating the server socket: java.net.BindException: Address already in use
 > 
 > It looks like httpd is trying to start JVM over and over again despite it is already running.
 > In several days I have hundreds of lines with this message
 [snip]
 
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: submit@bugz.apache.org, apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Mon, 14 Feb 2000 11:28:24 -0800 (PST)

 Instead of running 'killall -HUP httpd', try sending HUP to only the
 parent httpd process.  (If you used the RedHat RPM, IIRC this would be: 
 "kill -HUP `cat /var/run/httpd.pid`" -- though you may need to change the
 file location -- or perhaps something like '/etc/rc.d/apache reload'.)  If
 you send killall -HUP, the child httpd processes will recieve two HUP
 signals.  That may (or may not) be sufficient to cause problems of some
 sort or another with JServ ...
 
 Generally, the error which you've described occurs when you're using
 automatic mode, and mod_jserv fails to tell the JVM to terminate; I'm not
 sure what could have changed between 1.0 and 1.1, but it's certainly
 possible that something changed which would affect timing slightly. 
 
 You can, of course, turn off automatic mode, which would solve this
 problem -- but then you need to do process management for the JVM
 yourself. 
 
 good luck --
 
 Ed
 
 
 
 On 14 Feb 2000, Vladislav Malyshkin wrote:
 
 [snip]
 > I have the following problem
 > 
 > I  installed ApacheJServ 1.1 which starts automatically by httpd.
 > It works fine untill first restart of HTTPD by command killall -HUP httpd
 > Since httpd received -HUP signal every few minutes I get a new message in httpd server error_log
 > 
 > ApacheJServ/1.1: Exception creating the server socket: java.net.BindException: Address already in use
 > 
 > It looks like httpd is trying to start JVM over and over again despite it is already running.
 > In several days I have hundreds of lines with this message
 [snip]
 
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Mon, 14 Feb 2000 14:58:37 -0500

 Why not to get a solution instead of a workarounds.
 As it is now after getting a -HUP signal the other httpd processes
 will try to start JVM machine forever (it was not the case in ApacheJServ 1.0 by the way).
 And httpd will be in some kind of unstable state trying to exec JVM forever.
 -HUP is a standard sygnal used to restart UNIX daemons for ages.
 
 An example how this problem can be fixed is:
 every time before starting JVM ping it first to see if JVM already running.
 If it is already running - stop trying to start JVM from this process.
 You already have all these functions in ApacheJServ-1.1/src/c/*.c , just  call them accordinly.
 
 > Instead of running 'killall -HUP httpd', try sending HUP to only the
 > parent httpd process.  (If you used the RedHat RPM, IIRC this would be:
 > "kill -HUP `cat /var/run/httpd.pid`" -- though you may need to change the
 > file location -- or perhaps something like '/etc/rc.d/apache reload'.)
 
 Many other scripts restart httpd (logrotate and others).
 Also -HUP signal to a daemon may be initiatied by
 many other UNIX programs (in some cases probably even by init).
 
 Vladislav
 
 
 > If
 > you send killall -HUP, the child httpd processes will recieve two HUP
 > signals.  That may (or may not) be sufficient to cause problems of some
 > sort or another with JServ ...
 >
 > Generally, the error which you've described occurs when you're using
 > automatic mode, and mod_jserv fails to tell the JVM to terminate; I'm not
 > sure what could have changed between 1.0 and 1.1, but it's certainly
 > possible that something changed which would affect timing slightly.
 >
 > You can, of course, turn off automatic mode, which would solve this
 > problem -- but then you need to do process management for the JVM
 > yourself.
 >
 > good luck --
 >
 > Ed
 >
 > On 14 Feb 2000, Vladislav Malyshkin wrote:
 >
 > [snip]
 > > I have the following problem
 > >
 > > I  installed ApacheJServ 1.1 which starts automatically by httpd.
 > > It works fine untill first restart of HTTPD by command killall -HUP httpd
 > > Since httpd received -HUP signal every few minutes I get a new message in httpd server error_log
 > >
 > > ApacheJServ/1.1: Exception creating the server socket: java.net.BindException: Address already in use
 > >
 > > It looks like httpd is trying to start JVM over and over again despite it is already running.
 > > In several days I have hundreds of lines with this message
 > [snip]
 >
 > --
 > See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
 >                  http://www.Apachecon.com/
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: bugs@apache.org, apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Mon, 14 Feb 2000 17:48:07 -0800 (PST)

 On Mon, 14 Feb 2000, Vladislav Malyshkin wrote:
 
 > Hi, Ed.
 > It was a problem with wrapper: it  does not kill java VM in case of some
 > signal delivery. In case of some timing when the signal is delivered  the
 > value of jvm_pid is 0 and the JVM is not killed.
 [snip]
 
 Hi --
 
 The correct solution remains to send a SIGHUP to the parent only, not to
 all the children (esp if, as you indicated to me in private mail, this is
 sufficient).  In any case, that is the correct way to stop Apache -- it
 follows the API, and it's in the scripts which Apache distributes. 
 Sending SIGHUP to all the httpd processes is simply wrong.
 
 The change which you've shown effectively means that the JVM will recieve
 a SIGHUP, rather than being signaled to shut down in the normal fashion --
 that means that servlets are not given an opportunity to shut down, as
 required by the Servlet API.  Needless to say, I'm not going to apply this
 patch. 
 
 If you could explain a bit more about how you think the jserv wrapper
 might fail to signal the JVM correctly during normal opperations (which
 doesn't includ using killall), I'm willing to look into that, however.  I
 haven't seen it, but then I've always used manual mode, rather than
 automatic, and I'm not currently admining any sites using JServ. 
 
 Ed
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 09:52:44 -0500

 Hi, Ed.
 This patch also fixes this problem.
 
 
  diff -u jserv_wrapper_unix.c.orig jserv_wrapper_unix.c
 --- jserv_wrapper_unix.c.orig   Mon Feb 14 16:16:11 2000
 +++ jserv_wrapper_unix.c        Tue Feb 15 09:45:59 2000
 @@ -362,6 +362,12 @@
                             jvm_pid = 0;
                         }
 
 +    /* If we get a TERM signal, shut down the JVM nicely, then exit.
 +     */
 +    signal(SIGTERM, wrapper_shutdown);
 +    signal(SIGHUP, wrapper_shutdown);
 +
 +
 
 
 
 Ed Korthof wrote:
 
 > On Mon, 14 Feb 2000, Vladislav Malyshkin wrote:
 >
 > > Hi, Ed.
 > > It was a problem with wrapper: it  does not kill java VM in case of some
 > > signal delivery. In case of some timing when the signal is delivered  the
 > > value of jvm_pid is 0 and the JVM is not killed.
 > [snip]
 >
 > Hi --
 >
 > The correct solution remains to send a SIGHUP to the parent only, not to
 > all the children (esp if, as you indicated to me in private mail, this is
 > sufficient).  In any case, that is the correct way to stop Apache -- it
 > follows the API, and it's in the scripts which Apache distributes.
 > Sending SIGHUP to all the httpd processes is simply wrong.
 >
 > The change which you've shown effectively means that the JVM will recieve
 > a SIGHUP, rather than being signaled to shut down in the normal fashion --
 > that means that servlets are not given an opportunity to shut down, as
 > required by the Servlet API.  Needless to say, I'm not going to apply this
 > patch.
 >
 > If you could explain a bit more about how you think the jserv wrapper
 > might fail to signal the JVM correctly during normal opperations (which
 > doesn't includ using killall), I'm willing to look into that, however.  I
 > haven't seen it, but then I've always used manual mode, rather than
 > automatic, and I'm not currently admining any sites using JServ.
 >
 > Ed
 > --
 > See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
 >                  http://www.Apachecon.com/
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 07:17:53 -0800 (PST)

 Hi --
 
 First, I have to ask -- do you see this error occuring when you send
 SIGHUP to only the parent process?  I won't be surprised if that's the
 case, but I want to know either way.
 
 The location which you've shown isn't the best place for this, fyi -- look
 around line 201 to see the place where this ought to go (you'll see one
 call like this, for SIGTERM, but none for SIGHUP).  The difference isn't
 huge, but there's no point in registering the signal handler every time we
 go through the loop (except for SIGALRM, since that handler may need to
 run repeatedly).  The fact that we don't set a signal handler for SIGHUP
 may or may not be a real problem -- that's why I want to know if you still
 see the problem when you only send SIGHUP to the parent. 
 
 Apache sets up its own signal handler for SIGHUP -- and I'm a little
 hesitant to mess with that.  When that handler recieved a SIGHUP, it
 starts the standard Apache cleanup -- I don't think this cleanup is needed
 or even appropriate w/in the wrapper process (which isn't like a normal
 httpd child) but I'd want to verify that this isn't going to cause
 problems before changing it. 
 
 mod_jserv registers a clean function, so when the standard Apache cleanup
 is run, that function should shut down the JVM (or at least you should see
 a message to the extent that it's trying to do so).  OTOH, it's possible
 that there is a race condition or some other error, when SIGHUP is used. 
 (I think it's been tested much more extensively with SIGTERM.) 
 
 Ed
 
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 10:23:39 -0500

 This is a new patch which also fixes a problem
 with races when a signal is delivered during processing a signal.
 (It leaded to error messages in log that JSern is not responding)
 Vladislav
 
  diff -u jserv_wrapper_unix.c.orig jserv_wrapper_unix.c
 --- jserv_wrapper_unix.c.orig   Mon Feb 14 16:16:11 2000
 +++ jserv_wrapper_unix.c        Tue Feb 15 10:15:27 2000
 @@ -98,10 +98,12 @@
  /* this is also used from the loop to kill JVM                               */
  void kill_hung_jvm(int signum) {
    int counter = 0;
 +  const int jvm_pid_local=jvm_pid;
 
    /* Is jvm is really started? If not - do nothing */
 -  if( jvm_pid == 0)
 +  if( jvm_pid_local == 0)
      return;
 +  jvm_pid=0;
 
    if( signum == 0) {
      jserv_error(JSERV_LOG_INFO, wrapper_data->config,
 @@ -112,18 +114,17 @@
    }
    /* IF JVM is not responding to connections, we can't do   *
     * anything but kill it.                                  */
 -  kill(jvm_pid, SIGTERM);
 +  kill(jvm_pid_local, SIGTERM);
 
    /* give the VM as long as five seconds to die gracefully */
    while (counter++ < 5) {
 -    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
        break;
      sleep(1);
    }
 -  if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -    kill(jvm_pid, SIGKILL);
 +  if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +    kill(jvm_pid_local, SIGKILL);
    }
 -  jvm_pid=0;
  }
 
 
 @@ -362,6 +363,12 @@
                             jvm_pid = 0;
                         }
 
 +    /* If we get a TERM signal, shut down the JVM nicely, then exit.
 +     */
 +    signal(SIGTERM, wrapper_shutdown);
 +    signal(SIGHUP, wrapper_shutdown);
 +
 +
 
                         /* install SIGALARM handler to implement a timeout in communication */
                         /* NOTE: As it is installed in each loop, it should work with SYSV signal()*/
 @@ -477,30 +484,32 @@
  /* ========================================================================= */
  /* This does the actual cleanup */
  int wrapper_shutdown_core(wrapper_config *cfg) {
 -    if (jvm_pid != 0) {
 +  const int jvm_pid_local=jvm_pid;
 +    if (jvm_pid_local != 0) {
          int counter = 0;
 +        jvm_pid=0;
          jserv_error(JSERV_LOG_INFO,wrapper_data->config,
                      "wrapper: Terminating JServ (PID=%d, VM PID=%d)",
 -                    getpid(), jvm_pid);
 +                    getpid(), jvm_pid_local);
          /* Send shutdown function */
          jserv_protocol_function(cfg->config->protocol,cfg->config,
                                  JSERV_SHUTDOWN,NULL);
          /* Wait for child to go down */
 -        while (waitpid(jvm_pid,NULL,WNOHANG)==0) {
 +        while (waitpid(jvm_pid_local,NULL,WNOHANG)==0) {
              /* give it a little while to shut down gracefully. Then kill it. */
              if (++counter > cfg->config->vmtimeout) {
                  jserv_error(JSERV_LOG_EMERG, wrapper_data->config,
                              "wrapper: JServ (%d) didn't die nicely, killing it",
 -                            jvm_pid);
 -                kill(jvm_pid, SIGTERM); /* give the process a chance to die */
 +                            jvm_pid_local);
 +                kill(jvm_pid_local, SIGTERM); /* give the process a chance to die */
                  counter = 0;
                  while (counter++ < 3) {
 -                    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +                    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
                          return 0;
                      sleep(1);
                  }
 -                if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -                    kill(jvm_pid, SIGKILL);
 +                if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +                    kill(jvm_pid_local, SIGKILL);
                  }
              }
              sleep(1);
 
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 10:39:54 -0500

 >
 > Apache sets up its own signal handler for SIGHUP -- and I'm a little
 > hesitant to mess with that.  When that handler recieved a SIGHUP, it
 > starts the standard Apache cleanup -- I don't think this cleanup is needed
 > or even appropriate w/in the wrapper process (which isn't like a normal
 > httpd child)
 
 I think that wrapper needs this cleanup function and first thing which wrapper must do
 on cleanup is to stop JVM. Otherwise you may easily get a runaway JVM
 which will create a serious problem:
 the only way to start new apache process will be to kill runaway JVM manually
 and then start apache.
 So I think instead of adding SIGHUP handler it will be better to implement
 this cleanup function which will call
 wrapper_shutdown(0);
 
 Vladislav
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 07:57:54 -0800 (PST)

 On Tue, 15 Feb 2000, Vladislav Malyshkin wrote: 
 
 > > First, I have to ask -- do you see this error occuring when you send
 > > SIGHUP to only the parent process?  I won't be surprised if that's the
 > > case, but I want to know either way.
 > 
 > When I send a SIGHUP to httpd root process everything is OK.
 > It works as:
 > httpd root - SIGTERM -> wrapper watcher process -> kills JVM
 > 
 > in case of killall -HUP httpd command
 > 
 > originally it works as
 > SIGHUP -> wrapper watcher process -> dies and leaves runaway JVM
 > SIGHUP -> httpd root -> nothing left to clean, wrapper already dead
 > 
 > With my last patch I sent to you it works like:
 > SIGHUP -> wrapper watcher process -> kills JVM
 > SIGHUP -> httpd root -> SIGTERM to wrapper watcher (if we already processing wrapper_shutdown do nothing,
 > otherwise do cleanup)
 > 
 > Vladislav
  
 The bug which you're describing isn't a bug in Apache JServ, it's a bug in
 your restart script, which uses killall.  You can fix it by fixing that
 script.
 
 You're also welcome to send your patch to the developer's list -- it's
 possible that folks will agree that this is a feature worth adding. 
 (After making some changes to it, anyway.)  However, it's not a bug, so
 I'm going to leave it and go back to my day job -- I think it's silly to
 work around something as broken as using killall to restart Apache. 
 
 BTW -- your diagrams are incorrect.  In all cases, when the parent httpd
 gets SIGHUP, it sends SIGHUP to it's children.  It then waits some
 hundreds of milliseconds; if any are still alive, it sends each another
 SIGHUP.  It then waits a bit more than a second; if any are still alive it
 then sends each a SIGTERM.  The behavior is different if the parent
 recieves a SIGTERM, however -- in that case, it skips directly to sending
 SIGTERMs. 
 
 In the second, case, using killall, here's what I'd describe: 
 
 SIGHUP -> wrapper + httpd parent
   wrapper starts cleaning up
   httpd parent sends SIGHUP to all children
     SIGHUP -> wrapper interrupts cleanup process
 
 This illustrates why the problem is intermittent -- sometimes the wrapper
 will finish sending it's signal to the JVM before it recieves the second
 SIGHUP, and sometimes it won't.  It also illustrates why killall is the
 wrong tool to use: none of the children are sure to be able to clean up
 normally, which means that other modules may misbehave as well.  You'll
 note that your diagram offers no way in which the shutdown could ever be
 succesful, but you indicated that it does work some of the time.
 
 good luck --
 
 Ed
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 08:09:37 -0800 (PST)

 On Tue, 15 Feb 2000, Vladislav Malyshkin wrote:
 
 > > Apache sets up its own signal handler for SIGHUP -- and I'm a little
 > > hesitant to mess with that.  When that handler recieved a SIGHUP, it
 > > starts the standard Apache cleanup -- I don't think this cleanup is needed
 > > or even appropriate w/in the wrapper process (which isn't like a normal
 > > httpd child)
 > 
 > I think that wrapper needs this cleanup function and first thing which wrapper must do
 > on cleanup is to stop JVM. Otherwise you may easily get a runaway JVM
 > which will create a serious problem:
 > the only way to start new apache process will be to kill runaway JVM manually
 > and then start apache.
 > So I think instead of adding SIGHUP handler it will be better to implement
 > this cleanup function which will call
 > wrapper_shutdown(0);
 
 grep for 'ap_register_cleanup' within the c source files (particularly
 mod_jserv.c).  Unfortunately, you'll have to follow several layers of
 indirection, but this eventually leads to a call to wrapper_destroy, which
 (under Unix) issues a SIGTERM to the watcher process.
 
 Hmm.  Actually, looking at that again -- I guess you're right that the
 wrapper process should never recieve SIGHUP -- which is exactly what
 happens when you use killall.  It gets SIGTERM through the cleanup process
 in the parent httpd ... so my diagrams were bogus.
 
 But I'll stand by my statement that using killall is simply broken, and
 not (imnsho) worth working around.
 
 good luck --
 
 Ed
 --
 See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
                  http://www.Apachecon.com/
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 12:01:39 -0500

 Hi Ed,
 There is another strange thing with jserw wrapper,
 how it apache sets signal handlers.
 For debugging I added printing to int wrapper_destroy(wrapper_config *cfg)
   jserv_error(JSERV_LOG_INFO,wrapper_data->config,
        "WRAPPER_DESTROY CALLED WRAPPER PID=%d",
        wrapper_pid);
 I start httpd, httpd starts wrapper,
 and I do
 kill -TERM wrapper_process_number
 I see messages in log that everything is processed fine.
 
 [Tue Feb 15 11:33:15 2000] [info] JServ: WRAPPER_DESTROY CALLED WRAPPER PID=19316
 [Tue Feb 15 11:33:15 2000] [info] JServ: Apache Module was cleaned-up
 [Tue Feb 15 11:33:15 2000] [notice] Digest: generating secret for digest authentication ...
 [Tue Feb 15 11:33:15 2000] [notice] Digest: done
 [Tue Feb 15 11:33:15 2000] [info] created shared memory segment #11393
 [Tue Feb 15 11:33:15 2000] [notice] Apache/1.3.11 (Unix) ApacheJServ/1.1 configured -- resuming normal operations
 [Tue Feb 15 11:33:15 2000] [info] Server built: Feb 15 2000 11:13:18
 [Tue Feb 15 11:33:18 2000] [info] JServ: wrapper classpath: /home/apache/installation/libexec/ApacheJServ.jar:/home/apache/sources/JSDK2.0/lib/jsdk.jar:/home/apache/sources/mm.mysql.jdbc/mysql_uncomp.jar
 [Tue Feb 15 11:33:18 2000] [info] JServ: wrapper: Java VM spawned (PID=19324, PPID=19318)
 [Tue Feb 15 11:33:28 2000] [info] JServ: wrapper: watching processes (PID=19318,PPID=19317,JVM PID=19324)
 
 here I do kill -TERM 19318 command
 
 [Tue Feb 15 11:34:03 2000] [info] JServ: WRAPPER SHUTDOWN CALLED PID=19318 SIGNAL=15
 [Tue Feb 15 11:34:03 2000] [info] JServ: Wrapper: Shutting down JServ (PID=19318) (sig 15) JVM pid=19324
 [Tue Feb 15 11:34:03 2000] [info] JServ: wrapper: Terminating JServ (PID=19318, VM PID=19324)
 [Tue Feb 15 11:34:03 2000] [info] JServ: ajp12: sending shutdown signal
 
 Then I do same thing, but with -HUP process kill -HUP wrapper_process_number
 
 [Tue Feb 15 11:36:15 2000] [info] JServ: WRAPPER_DESTROY CALLED WRAPPER PID=19366
 [Tue Feb 15 11:36:15 2000] [info] JServ: Apache Module was cleaned-up
 [Tue Feb 15 11:36:15 2000] [notice] Digest: generating secret for digest authentication ...
 [Tue Feb 15 11:36:15 2000] [notice] Digest: done
 [Tue Feb 15 11:36:15 2000] [info] created shared memory segment #11521
 [Tue Feb 15 11:36:15 2000] [notice] Apache/1.3.11 (Unix) ApacheJServ/1.1 configured -- resuming normal operations
 [Tue Feb 15 11:36:15 2000] [info] Server built: Feb 15 2000 11:13:18
 [Tue Feb 15 11:36:18 2000] [info] JServ: wrapper classpath: /home/apache/installation/libexec/ApacheJServ.jar:/home/apache/sources/JSDK2.0/lib/jsdk.jar:/home/apache/sources/mm.mysql.jdbc/mysql_uncomp.jar
 [Tue Feb 15 11:36:18 2000] [info] JServ: wrapper: Java VM spawned (PID=19374, PPID=19368)
 [Tue Feb 15 11:36:28 2000] [info] JServ: wrapper: watching processes (PID=19368,PPID=19367,JVM PID=19374)
 
 kill -HUP 19368
 
 and nothing in log. The process is just killed
 It should print at least
  "WRAPPER_DESTROY CALLED WRAPPER PID=%d",
 which I added to wrapper_destroy.
 But as you wrote to me before -HUP signal is handled by apache.
 wrapper_detroy is called on process cleanup?
 
 Is everything fine with ap_register_cleanup in mod_jserv?
 May be I am wrong, but what I see the -HUP signal
 is not handled and cleanup routines of jserv_ module are never called.
 (at least with wrapper_destroy this is definitely the case.
  It should be called by wrapper_cleanup)
 
 Vladislav
 
 Ed Korthof wrote:
 
 > On Tue, 15 Feb 2000, Vladislav Malyshkin wrote:
 >
 > > > Apache sets up its own signal handler for SIGHUP -- and I'm a little
 > > > hesitant to mess with that.  When that handler recieved a SIGHUP, it
 > > > starts the standard Apache cleanup -- I don't think this cleanup is needed
 > > > or even appropriate w/in the wrapper process (which isn't like a normal
 > > > httpd child)
 > >
 > > I think that wrapper needs this cleanup function and first thing which wrapper must do
 > > on cleanup is to stop JVM. Otherwise you may easily get a runaway JVM
 > > which will create a serious problem:
 > > the only way to start new apache process will be to kill runaway JVM manually
 > > and then start apache.
 > > So I think instead of adding SIGHUP handler it will be better to implement
 > > this cleanup function which will call
 > > wrapper_shutdown(0);
 >
 > grep for 'ap_register_cleanup' within the c source files (particularly
 > mod_jserv.c).  Unfortunately, you'll have to follow several layers of
 > indirection, but this eventually leads to a call to wrapper_destroy, which
 > (under Unix) issues a SIGTERM to the watcher process.
 >
 > Hmm.  Actually, looking at that again -- I guess you're right that the
 > wrapper process should never recieve SIGHUP -- which is exactly what
 > happens when you use killall.  It gets SIGTERM through the cleanup process
 > in the parent httpd ... so my diagrams were bogus.
 >
 > But I'll stand by my statement that using killall is simply broken, and
 > not (imnsho) worth working around.
 >
 > good luck --
 >
 > Ed
 > --
 > See you at ApacheCon 2000 in Orlanda, Florida, March 8-10, 2000.
 >                  http://www.Apachecon.com/
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Tue, 15 Feb 2000 13:31:07 -0500

 Last message, just fyi.
 The wrapper process of jserv is not hooked up to apache cleanup standard routines.
 The method  jserv_child_init is never called for wrapper process.
 This method is called only by regular httpd processes, not by wrapper process.
 This is a log (I added more prints to jserv c code)
 the httpd root owned process has pid=20041, wrapper process pid=2042,
 As you see from the log below wrapper process currently is not a subject to standard apache cleanup.
 Should it be added to that?
 Vladislav
 
 JSERV_INIT called mod_jserv.c 1266 PID=20039
  JSERV_EXIT CALLED mod_jserv.c 1223
 WRAPPER_CLEANUP CALLED WRAPPER_CLEANUP CALLED WRAPPER DATA !=NULL 1[Tue Feb 15 13:03:31 2000] [info] JServ: WRAPPER_DESTROY CALLED WRAPPER PID=20040
 [Tue Feb 15 13:03:31 2000] [info] JServ: Apache Module was cleaned-up
 JSERV_INIT called mod_jserv.c 1266 PID=20041
 [Tue Feb 15 13:03:31 2000] [notice] Digest: generating secret for digest authentication ...
 [Tue Feb 15 13:03:31 2000] [notice] Digest: done
 [Tue Feb 15 13:03:31 2000] [info] created shared memory segment #12417
 [Tue Feb 15 13:03:31 2000] [notice] Apache/1.3.11 (Unix) ApacheJServ/1.1 configured -- resuming normal operations
 [Tue Feb 15 13:03:31 2000] [info] Server built: Feb 15 2000 13:03:25
 JSERV_CHILD_INIT called mod_jserv.c 1305 PID=20043
 JSERV_CHILD_INIT called mod_jserv.c 1305 PID=20044
 JSERV_CHILD_INIT called mod_jserv.c 1305 PID=20045
 JSERV_CHILD_INIT called mod_jserv.c 1305 PID=20046
 JSERV_CHILD_INIT called mod_jserv.c 1305 PID=20047
 [Tue Feb 15 13:03:34 2000] [info] JServ: wrapper classpath: /home/apache/installation/libexec/ApacheJServ.jar:/home/apache/sources/JSDK2.0/lib/jsdk.jar:/home/apache/sources/mm.mysql.jdbc/mysql_uncomp.jar
 [Tue Feb 15 13:03:34 2000] [info] JServ: wrapper: Java VM spawned (PID=20048, PPID=20042)
 [Tue Feb 15 13:03:44 2000] [info] JServ: wrapper: watching processes (PID=20042,PPID=20041,JVM PID=20048)
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Ed Korthof <ed@cloudfactory.org>, apbugs@apache.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and -HUP
Date: Mon, 28 Feb 2000 22:27:18 -0500

 Hi, again.
 I am still experiencing the same problem, even without
 killall -HUP, just with apachectl restart , but much more seldom.
 Today is one of these days, so I looked at it.
 It looks like the main problem is with getppid()
 which is checked with 1 instead of 0.
 Allso I added -HUP handler,
 which is definitely OK because wrapper process
 does not use any apache handler anyway
 (the process is received by just calling fork
 without any apache setup calls)
 The following patch fixes all these problems.
 Vladislav
 
 
 --- ApacheJServ-1.1/src/c/jserv_wrapper_unix.c.orig Mon Feb 14 16:16:11 2000
 +++ ApacheJServ-1.1/src/c/jserv_wrapper_unix.c Mon Feb 28 22:16:09 2000
 @@ -98,10 +98,12 @@
  /* this is also used from the loop to kill JVM                               */
  void kill_hung_jvm(int signum) {
    int counter = 0;
 -
 +  const int jvm_pid_local=jvm_pid;
 +
    /* Is jvm is really started? If not - do nothing */
 -  if( jvm_pid == 0)
 +  if( jvm_pid_local == 0)
      return;
 +  jvm_pid=0;
 
    if( signum == 0) {
      jserv_error(JSERV_LOG_INFO, wrapper_data->config,
 @@ -112,18 +114,17 @@
    }
    /* IF JVM is not responding to connections, we can't do   *
     * anything but kill it.                                  */
 -  kill(jvm_pid, SIGTERM);
 +  kill(jvm_pid_local, SIGTERM);
 
    /* give the VM as long as five seconds to die gracefully */
    while (counter++ < 5) {
 -    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
        break;
      sleep(1);
    }
 -  if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -    kill(jvm_pid, SIGKILL);
 +  if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +    kill(jvm_pid_local, SIGKILL);
    }
 -  jvm_pid=0;
  }
 
 
 @@ -199,6 +200,7 @@
      /* If we get a TERM signal, shut down the JVM nicely, then exit.
       */
      signal(SIGTERM, wrapper_shutdown);
 +    signal(SIGHUP, wrapper_shutdown);
 
      x = 5;
      while (binparams != NULL) {
 @@ -343,7 +345,7 @@
 
  #ifndef JSERV_STANDALONE
              /* did parent httpd die? */
 -            if(getppid() == 1) {
 +            if(getppid() == 0) {
                  jserv_error(JSERV_LOG_INFO,wrapper_data->config,
                              "wrapper: Apache exited, cleaning up (PID=%d)",
                              getpid());
 @@ -477,30 +479,32 @@
  /* ========================================================================= */
  /* This does the actual cleanup */
  int wrapper_shutdown_core(wrapper_config *cfg) {
 -    if (jvm_pid != 0) {
 +  const int jvm_pid_local=jvm_pid;
 +    if (jvm_pid_local != 0) {
          int counter = 0;
 +        jvm_pid=0;
          jserv_error(JSERV_LOG_INFO,wrapper_data->config,
                      "wrapper: Terminating JServ (PID=%d, VM PID=%d)",
 -                    getpid(), jvm_pid);
 +                    getpid(), jvm_pid_local);
          /* Send shutdown function */
          jserv_protocol_function(cfg->config->protocol,cfg->config,
                                  JSERV_SHUTDOWN,NULL);
          /* Wait for child to go down */
 -        while (waitpid(jvm_pid,NULL,WNOHANG)==0) {
 +        while (waitpid(jvm_pid_local,NULL,WNOHANG)==0) {
              /* give it a little while to shut down gracefully. Then kill it. */
              if (++counter > cfg->config->vmtimeout) {
                  jserv_error(JSERV_LOG_EMERG, wrapper_data->config,
                              "wrapper: JServ (%d) didn't die nicely, killing it",
 -                            jvm_pid);
 -                kill(jvm_pid, SIGTERM); /* give the process a chance to die */
 +                            jvm_pid_local);
 +                kill(jvm_pid_local, SIGTERM); /* give the process a chance to die */
                  counter = 0;
                  while (counter++ < 3) {
 -                    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +                    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
                          return 0;
                      sleep(1);
                  }
 -                if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -                    kill(jvm_pid, SIGKILL);
 +                if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +                    kill(jvm_pid_local, SIGKILL);
                  }
              }
              sleep(1);
 
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: Neil_Mckee@inmon.com, apbugs@apache.org, ed@cloudfactory.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Fri, 07 Apr 2000 21:23:32 -0400

 >
 > We were seeing the same problem - where multiple SIGHUPs
 > cause mod_jserv to lose track.  I tried changing
 > /etc/logrotate.d/apache to use "kill -HUP `cat /var/run/httpd.pid`"
 > instead of "killall -HUP httpd" but that only seems
 > to work if only one log is being rotated.
 >
 
 It also fails to rotate if you send several
 kill -HUP `cat /var/run/httpd.pid`
 (when you send next -HUP while the server is processing previos -HUP)
 This is precisely what happenes when you rotate sevaral apache logs.
 For each log roateted logrotate send a -HUP signal.
 And while apache processes -HUP sent after access_log was rotated
 it receives -HUP caused by error_log rotation.
 This kills the watchdog of JVM and you get a runaway JVM.
 
 This is the patch I use to fix this problem.
 It fixes this runaway problem.
 Also, even if you have a runaway JVM this
 modification  of watchdog will send an EXIT command to it,
 so it will not be a problem even in this case.
 
 Vladislav
 
 The patch is:
 
 --- ApacheJServ-1.1/src/c/jserv_wrapper_unix.c.orig     Mon Feb 14 16:16:11 2000
 +++ ApacheJServ-1.1/src/c/jserv_wrapper_unix.c  Tue Mar  7 13:54:28 2000
 @@ -84,6 +84,10 @@
  /* Signal handler for SIGTERM (standalone wrapper), and for Apache 1.2, for
   * when the parent Apache process dies.   JServ should kill the JVM. */
  void wrapper_shutdown(int x) {
 +    signal(SIGTERM, wrapper_shutdown);
 +    signal(SIGHUP, wrapper_shutdown);
 +    signal(SIGALRM, wrapper_shutdown);
 +
      jserv_error(JSERV_LOG_INFO, wrapper_data->config,
                  "Wrapper: Shutting down JServ (PID=%d) (sig %d)",getpid(), x);
      /* Cleanup this thing */
 @@ -98,10 +102,12 @@
  /* this is also used from the loop to kill JVM                               */
  void kill_hung_jvm(int signum) {
    int counter = 0;
 -
 +  const int jvm_pid_local=jvm_pid;
 +
    /* Is jvm is really started? If not - do nothing */
 -  if( jvm_pid == 0)
 +  if( jvm_pid_local == 0)
      return;
 +  jvm_pid=0;
 
    if( signum == 0) {
      jserv_error(JSERV_LOG_INFO, wrapper_data->config,
 @@ -112,18 +118,17 @@
    }
    /* IF JVM is not responding to connections, we can't do   *
     * anything but kill it.                                  */
 -  kill(jvm_pid, SIGTERM);
 +  kill(jvm_pid_local, SIGTERM);
 
    /* give the VM as long as five seconds to die gracefully */
    while (counter++ < 5) {
 -    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
        break;
      sleep(1);
    }
 -  if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -    kill(jvm_pid, SIGKILL);
 +  if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +    kill(jvm_pid_local, SIGKILL);
    }
 -  jvm_pid=0;
  }
 
 
 @@ -193,12 +198,13 @@
      if (proc!=0) return proc;
 
      /* Sleep two seconds waiting for first init to finish and to kill this
 -     * process  - TODO remove this and find a nicer soulution to doublestart */
 -    sleep(3);
 -
      /* If we get a TERM signal, shut down the JVM nicely, then exit.
       */
      signal(SIGTERM, wrapper_shutdown);
 +    signal(SIGHUP, wrapper_shutdown);
 +
 +    /* process  - TODO remove this and find a nicer soulution to doublestart */
 +    sleep(3);
 
      x = 5;
      while (binparams != NULL) {
 @@ -340,10 +346,11 @@
          /* Check every second */
          while (1) {
           sighandler_t old_handler;
 +         int ping_result;
 
  #ifndef JSERV_STANDALONE
              /* did parent httpd die? */
 -            if(getppid() == 1) {
 +            if(getppid() <=1 ) {
                  jserv_error(JSERV_LOG_INFO,wrapper_data->config,
                              "wrapper: Apache exited, cleaning up (PID=%d)",
                              getpid());
 @@ -373,19 +380,32 @@
                            in many places.
                          */
                         alarm(wrapper_data->config->vmtimeout);
 -
 -                       /* check if we can communicate to JVM */
 -                       if( jvm_pid != 0 && jserv_protocol_function(wrapper_data->config->protocol,wrapper_data->config,
 -                                                   JSERV_PING,NULL) == JSERV_FUNC_COMMERROR) {
 -
 -                         /* Note that it's harmless that this function is called twice
 -                            in case of timeout
 -                         */
 -                         kill_hung_jvm(0);
 -
 -                       }
 
 
 +                       ping_result=jserv_protocol_function(
 +                                wrapper_data->config->protocol,wrapper_data->config,
 +                               JSERV_PING,NULL);
 +
 +                       if(ping_result==JSERV_FUNC_COMMERROR)
 +                         {
 +                           if(jvm_pid != 0)
 +                             {
 +                               /* Note that it's harmless that this function is called twice
 +                                  in case of timeout
 +                               */
 +                               kill_hung_jvm(0);
 +                             }
 +                         }
 +                       else if(jvm_pid == 0)
 +                         {
 +
 +                           signal( SIGALRM, kill_hung_jvm);
 +                           /* Send shutdown function to a runaway JVM. */
 +                           jserv_protocol_function(
 +                                    wrapper_data->config->protocol,wrapper_data->config,
 +                                    JSERV_SHUTDOWN,NULL);
 +                         }
 +
                         /* Remove the signal, no matter if it was used or not */
                         alarm(0);
 
 @@ -477,30 +497,33 @@
  /* ========================================================================= */
  /* This does the actual cleanup */
  int wrapper_shutdown_core(wrapper_config *cfg) {
 -    if (jvm_pid != 0) {
 +
 +  const int jvm_pid_local=jvm_pid;
 +    if (jvm_pid_local != 0) {
          int counter = 0;
 +        jvm_pid=0;
          jserv_error(JSERV_LOG_INFO,wrapper_data->config,
                      "wrapper: Terminating JServ (PID=%d, VM PID=%d)",
 -                    getpid(), jvm_pid);
 +                    getpid(), jvm_pid_local);
          /* Send shutdown function */
          jserv_protocol_function(cfg->config->protocol,cfg->config,
                                  JSERV_SHUTDOWN,NULL);
          /* Wait for child to go down */
 -        while (waitpid(jvm_pid,NULL,WNOHANG)==0) {
 +        while (waitpid(jvm_pid_local,NULL,WNOHANG)==0) {
              /* give it a little while to shut down gracefully. Then kill it. */
              if (++counter > cfg->config->vmtimeout) {
                  jserv_error(JSERV_LOG_EMERG, wrapper_data->config,
                              "wrapper: JServ (%d) didn't die nicely, killing it",
 -                            jvm_pid);
 -                kill(jvm_pid, SIGTERM); /* give the process a chance to die */
 +                            jvm_pid_local);
 +                kill(jvm_pid_local, SIGTERM); /* give the process a chance to die */
                  counter = 0;
                  while (counter++ < 3) {
 -                    if (waitpid(jvm_pid, NULL, WNOHANG) > 0)
 +                    if (waitpid(jvm_pid_local, NULL, WNOHANG) > 0)
                          return 0;
                      sleep(1);
                  }
 -                if( waitpid(jvm_pid,NULL,WNOHANG)==0 ) {
 -                    kill(jvm_pid, SIGKILL);
 +                if( waitpid(jvm_pid_local,NULL,WNOHANG)==0 ) {
 +                    kill(jvm_pid_local, SIGKILL);
                  }
              }
              sleep(1);
 
 
 
 >
 >
 

From: Vladislav Malyshkin <mal@mail1.nai.net>
To: jon * <jon@clearink.com>, apbugs@apache.org,
 	ed@cloudfactory.org
Cc:  
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Sat, 08 Apr 2000 23:30:14 -0400

 This is a multi-part message in MIME format.
 --------------5F660E6BB0465B04B99C0963
 Content-Type: text/plain; charset=x-user-defined
 Content-Transfer-Encoding: 7bit
 
 Something strange. It may be netscape screw up some spaces in
 my letter. Now I am sending the patch in encoded form.
 I am sending 3 files:
 original file: 19385 Oct 31 06:27 jserv_wrapper_unix.c.original
 patches file: 20038 Mar  7 13:54 jserv_wrapper_unix.c
 the diff -u file:  5804 Apr  8 22:59 patch_kill_JVM_ON_HUP
 It applies cleanly (at least for me).
 
 I can not do diff aganist CVS version right now,
 I will be able to do this some time next week.
 Also, I think some things may be improved in my patch,
 I wrote it in a great rush because it was a problem
 with production server, which was necessary to fix ASAP.
 I can look at my patch again later next week.
 
 The ideas behind my patch are:
 1. Add -HUP handler to watchdog process. This process is created by a separate fork()
     and has no standard signal haldlers set by apache. Another option may be to set signal handler
     by apache initialization functions. I did not do this. I added it directly.
 2. Add signal handler inside signal handler (because on SYSV siognals
     it will be reset after first signal was delivered. Because of this we may have a problem
     when several signals are delivered during very short period of time).
     Without this logrotate causes a problem because it delivers two signals
     during very short period of time. First one - after access_log rotation, second one - after error_log rotation.
 3. Always ping JVM before starting a new one (even if we were not able to start JVM process before).
     If ping succedded - send EXIT command via servlet protocol.
     This allows us to stop a runaway JVM if we have any. We stop a runaway JVM process
     and then start a new one in accordance with standard jserv_wrapper_unix.c logic.
 
 Items 1 and 3 are done well in my patch. About item 2 - I am not sure. I think it may be done
 in a more clean way. I can look at it again some time next week.
 
 Vladislav
 
 
 jon * wrote:
 
 > can you send me your patch as an enclosure directly?
 >
 > it isn't applying very well to the source code.
 >
 > also, it would be best if you could send me the diff -U against the current
 > CVS source code.
 >
 > thanks,
 >
 > -jon
 
 --------------5F660E6BB0465B04B99C0963
 Content-Type: application/x-gzip;
  name="patch.tar.gz"
 Content-Transfer-Encoding: base64
 Content-Disposition: inline;
  filename="patch.tar.gz"
 
 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
 +e5/hrNoJADIAAA=
 --------------5F660E6BB0465B04B99C0963--
 

From: Ed Korthof <ed@cloudfactory.org>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: jon * <jon@clearink.com>, apbugs@apache.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Sat, 8 Apr 2000 21:32:54 -0700 (PDT)

   This message is in MIME format.  The first part should be readable text,
   while the remaining parts are likely unreadable without MIME-aware tools.
   Send mail to mime@docserver.cac.washington.edu for more info.
 
 --------------5F660E6BB0465B04B99C0963
 Content-Type: TEXT/PLAIN; CHARSET=x-user-defined
 Content-ID: <Pine.LNX.3.96.1000408212754.20243H@stratus.cloudfactory.org>
 
 Hi Vladislav --
 
 I'm still of the opinion that in normal operating conditions, this isn't a
 bug; but after thinking about it, I also can't see any reason why it'd
 hurt to make these changes.  Defensive programming, and all that.
 
 However, a simpler solution to the problem you were having would be to
 move the error log at the same time you move the access log: that way only
 one HUP is required.  Is there a standard script which can only do this
 with two separate HUPs?   'Cause that's a bug, as I see it: it means extra
 downtime, and the possibility of confusion since the normal (orderly)
 restart process will generally be interrupted.  That's not how log
 rotation should happen.
 
 In any case, thanks for the patch and for persuing this; if I'd been less
 busy, I'd have gotten to it earlier.
 
 Ed
 
 On Sat, 8 Apr 2000, Vladislav Malyshkin wrote:
 
 > Something strange. It may be netscape screw up some spaces in
 > my letter. Now I am sending the patch in encoded form.
 > I am sending 3 files:
 > original file: 19385 Oct 31 06:27 jserv_wrapper_unix.c.original
 > patches file: 20038 Mar  7 13:54 jserv_wrapper_unix.c
 > the diff -u file:  5804 Apr  8 22:59 patch_kill_JVM_ON_HUP
 > It applies cleanly (at least for me).
 > 
 > I can not do diff aganist CVS version right now,
 > I will be able to do this some time next week.
 > Also, I think some things may be improved in my patch,
 > I wrote it in a great rush because it was a problem
 > with production server, which was necessary to fix ASAP.
 > I can look at my patch again later next week.
 > 
 > The ideas behind my patch are:
 > 1. Add -HUP handler to watchdog process. This process is created by a separate fork()
 >     and has no standard signal haldlers set by apache. Another option may be to set signal handler
 >     by apache initialization functions. I did not do this. I added it directly.
 > 2. Add signal handler inside signal handler (because on SYSV siognals
 >     it will be reset after first signal was delivered. Because of this we may have a problem
 >     when several signals are delivered during very short period of time).
 >     Without this logrotate causes a problem because it delivers two signals
 >     during very short period of time. First one - after access_log rotation, second one - after error_log rotation.
 > 3. Always ping JVM before starting a new one (even if we were not able to start JVM process before).
 >     If ping succedded - send EXIT command via servlet protocol.
 >     This allows us to stop a runaway JVM if we have any. We stop a runaway JVM process
 >     and then start a new one in accordance with standard jserv_wrapper_unix.c logic.
 > 
 > Items 1 and 3 are done well in my patch. About item 2 - I am not sure. I think it may be done
 > in a more clean way. I can look at it again some time next week.
 > 
 > Vladislav
 > 
 > 
 > jon * wrote:
 > 
 > > can you send me your patch as an enclosure directly?
 > >
 > > it isn't applying very well to the source code.
 > >
 > > also, it would be best if you could send me the diff -U against the current
 > > CVS source code.
 > >
 > > thanks,
 > >
 > > -jon
 > 
 
 --------------5F660E6BB0465B04B99C0963--

From: Neil McKee <Neil_Mckee@inmon.com>
To: Vladislav Malyshkin <mal@mail1.nai.net>
Cc: jon * <jon@clearink.com>, apbugs@apache.org, ed@cloudfactory.org
Subject: Re: mod_jserv/5755: mod_jserv and httpd -HUP restarting problem
Date: Sun, 09 Apr 2000 23:25:45 +0100

 Thanks Vladislav,
 
 This seems to work just fine. I can type
 "/usr/sbin/logrotate -f /etc/logrotate.conf" (or just send
 a blizzard of SIGHUPs using kill or killall) and it restarts
 everything quite happily.  Good work!
 
 As regards runaway jre proceses - we were seeing those last
 week.  For what it's worth, our fix was to increase the memory
 and stack sizes by starting jre with "-mx96000000 -ss1000000
 -oss1000000".
 
 We also experimented with the "-verbose" option.  After an initial
 flurry of class load messages, the servlet engine seemed to be reloading
 the SocketException class over and over (every minute or so). The output
 looked like this:
 
 [Loaded java/net/SocketException.class from /usr/inmon/lib/classes.zip]
 [Loaded java/net/SocketException.class from /usr/inmon/lib/classes.zip]
 [Loaded java/net/SocketException.class from /usr/inmon/lib/classes.zip]
 ...
 
 Any idea why it would be doing this?  Is it normal?
 
 regards,
 neil
 
 
 
 Vladislav Malyshkin wrote:
 > 
 > 
 > Something strange. It may be netscape screw up some spaces in
 > my letter. Now I am sending the patch in encoded form.
 > I am sending 3 files:
 > original file: 19385 Oct 31 06:27 jserv_wrapper_unix.c.original
 > patches file: 20038 Mar  7 13:54 jserv_wrapper_unix.c
 > the diff -u file:  5804 Apr  8 22:59 patch_kill_JVM_ON_HUP
 > It applies cleanly (at least for me).
 > 
 > I can not do diff aganist CVS version right now,
 > I will be able to do this some time next week.
 > Also, I think some things may be improved in my patch,
 > I wrote it in a great rush because it was a problem
 > with production server, which was necessary to fix ASAP.
 > I can look at my patch again later next week.
 > 
 > The ideas behind my patch are:
 > 1. Add -HUP handler to watchdog process. This process is created by a separate fork()
 >     and has no standard signal haldlers set by apache. Another option may be to set signal handler
 >     by apache initialization functions. I did not do this. I added it directly.
 > 2. Add signal handler inside signal handler (because on SYSV siognals
 >     it will be reset after first signal was delivered. Because of this we may have a problem
 >     when several signals are delivered during very short period of time).
 >     Without this logrotate causes a problem because it delivers two signals
 >     during very short period of time. First one - after access_log rotation, second one - after error_log rotation.
 > 3. Always ping JVM before starting a new one (even if we were not able to start JVM process before).
 >     If ping succedded - send EXIT command via servlet protocol.
 >     This allows us to stop a runaway JVM if we have any. We stop a runaway JVM process
 >     and then start a new one in accordance with standard jserv_wrapper_unix.c logic.
 > 
 > Items 1 and 3 are done well in my patch. About item 2 - I am not sure. I think it may be done
 > in a more clean way. I can look at it again some time next week.
 > 
 > Vladislav
 > 
 > jon * wrote:
 > 
 > > can you send me your patch as an enclosure directly?
 > >
 > > it isn't applying very well to the source code.
 > >
 > > also, it would be best if you could send me the diff -U against the current
 > > CVS source code.
 > >
 > > thanks,
 > >
 > > -jon
 > 
 >   ------------------------------------------------------------------------
 >                    Name: patch.tar.gz
 >    patch.tar.gz    Type: Unix Tape Archive (application/x-tar)
 >                Encoding: base64
 
 -- 
 ---------
 Neil McKee mailto:Neil_McKee@InMon.com
 InMon Corp.  http://www.InMon.com
>Unformatted:
 [In order for any reply to be added to the PR database, you need]
 [to include <apbugs@Apache.Org> in the Cc line and make sure the]
 [subject line starts with the report component and number, with ]
 [or without any 'Re:' prefixes (such as "general/1098:" or      ]
 ["Re: general/1098:").  If the subject doesn't match this       ]
 [pattern, your message will be misfiled and ignored.  The       ]
 ["apbugs" address is not added to the Cc line of messages from  ]
 [the database automatically because of the potential for mail   ]
 [loops.  If you do not include this Cc, your reply may be ig-   ]
 [nored unless you are responding to an explicit request from a  ]
 [developer.  Reply only with text; DO NOT SEND ATTACHMENTS!     ]
 
 

