Received: (qmail 18966 invoked by uid 2012); 6 Sep 1998 17:47:40 -0000
Message-Id: <19980906174740.18965.qmail@hyperreal.org>
Date: 6 Sep 1998 17:47:40 -0000
From: Carlos Amengual <webmaster@healthnet-sl.es>
Reply-To: webmaster@healthnet-sl.es
To: apbugs@hyperreal.org
Subject: initArgs are not parsed correctly
X-Send-Pr-Version: 3.2

>Number:         2962
>Category:       mod_jserv
>Synopsis:       initArgs are not parsed correctly
>Confidential:   no
>Severity:       critical
>Priority:       medium
>Responsible:    jserv
>State:          closed
>Class:          sw-bug
>Submitter-Id:   apache
>Arrival-Date:   Sun Sep  6 10:50:00 PDT 1998
>Last-Modified:  Sun Oct 25 23:36:11 PST 1998
>Originator:     webmaster@healthnet-sl.es
>Organization:
>Release:        
>Environment:
FreeBSD 2.2.6, JDK1.1.6, JSDK 2.0, Jserv snapshot of 980906.
>Description:
When initArgs has more than one parameters set, e.g.:

xxxx.xxxx.initArgs=name1=value1,\
    name2=value2,\
    name3=value3

the args will not be correctly parsed. If one puts a "\" to "join" the lines,
as above, the "name2", "name3" etc will not be parsed. Even the trace file
will not list them. For the above example, trace will give:

initArgs: '{ name1=value1 }'
>How-To-Repeat:

>Fix:
The problem is at "load" method at the "Configurations" class.
It is not able to identify "escaped" multiline configs. The following patch
is a hack but will do the job:

*** Configurations.java.orig	Fri Aug 21 21:02:30 1998
--- Configurations.java	Sun Sep  6 19:31:10 1998
***************
*** 160,170 ****
       */
      public void load(InputStream input) throws IOException {
          BufferedReader reader = new BufferedReader(new InputStreamReader(input));
!         String line;
  
          while ((line = reader.readLine()) != null) {
              line.trim();
              if (!line.startsWith("#")) {
                  int equalSign = line.indexOf('=');
                  if (equalSign > 0) {
                      String key = line.substring(0, equalSign);
--- 160,177 ----
       */
      public void load(InputStream input) throws IOException {
          BufferedReader reader = new BufferedReader(new InputStreamReader(input));
!         String line, escline;
  
          while ((line = reader.readLine()) != null) {
              line.trim();
              if (!line.startsWith("#")) {
+ 		while(line.endsWith("\\")){
+ 		    if((escline = reader.readLine()) != null) {
+ 			line = line.substring(0,line.length()-1) + escline;
+ 		    } else {
+ 			break;
+ 		    }
+ 		}
                  int equalSign = line.indexOf('=');
                  if (equalSign > 0) {
                      String key = line.substring(0, equalSign);
***************
*** 799,802 ****
                  + " doesn't map to a Double object");
          }
      }
! }
\ No newline at end of file
--- 806,809 ----
                  + " doesn't map to a Double object");
          }
      }
! }
>Audit-Trail:

From: webmaster@healthnet-sl.es
To: apbugs@hyperreal.org
Cc:  Subject: Re: mod_jserv/2962: initArgs are not parsed correctly
Date: Mon, 07 Sep 1998 14:40:35 +0200

 Here is a better fix for the problem than the previous hack
 I submitted. The attached patch should be applied to the current
 Configurations.java file (I labeled it as Configurations.java.orig) to
 give a correct Configurations.java.
 
 It will handle correctly even cases where the line ends with a "\" but
 is not really an "escaped" line, e.g. with:
 
 xxxx.initArgs=mydir=C:\\
 
 Note that the lines of the patch have been wrapped by my mail user
 agent.
 
 *** Configurations.java.orig	Mon Sep  7 13:06:26 1998
 --- Configurations.java	Mon Sep  7 13:24:44 1998
 ***************
 *** 160,178 ****
        */
       public void load(InputStream input) throws IOException {
           BufferedReader reader = new BufferedReader(new
 InputStreamReader(input));
 !         String line, escline;
   
           while ((line = reader.readLine()) != null) {
               line.trim();
               if (!line.startsWith("#")) {
 ! 	      while(line.endsWith("\\")){
 ! 		if((escline = reader.readLine()) != null) {
 ! 		  line = line.substring(0,line.length()-1) + escline;
 ! 		} else {
 ! 		  break;
 ! 		}
 ! 	      }
 ! 
   	        int equalSign = line.indexOf('=');
                   if (equalSign > 0) {
                       String key = line.substring(0, equalSign);
 --- 160,192 ----
        */
       public void load(InputStream input) throws IOException {
           BufferedReader reader = new BufferedReader(new
 InputStreamReader(input));
 !         String line;
   
           while ((line = reader.readLine()) != null) {
               line.trim();
               if (!line.startsWith("#")) {
 ! 		// Concatenate lines when ending with escape character '\\'
 !     		do {
 ! 	            // Check if end of line is a _real_ escape,
 ! 		    //  avoiding cases where the line really ends with
 ! 		    //  a legitimate '\\', for example "dir=C:\\"
 !     		    int endindex = line.length() - 1;
 ! 		    if( endindex < 0 )
 ! 			break;
 !     		    int i;
 !     		    for(i=endindex; i<=0 || line.charAt(i)=='\\'; i--) ;
 !     		    if( ((endindex-i) & 1) == 0 ){
 !     		        break;
 !     		    }
 !         	    String lastline;
 !     		    if((lastline = reader.readLine()) == null){
 ! 			// Found EOF after an escaped line. Throw exception
 !     		        throw new IOException();
 !     		    }
 ! 		    lastline.trim();
 !     		    line = line.substring(0,endindex).concat(lastline);
 !     		} while(true);
 ! 		
   	        int equalSign = line.indexOf('=');
                   if (equalSign > 0) {
                       String key = line.substring(0, equalSign);
State-Changed-From-To: open-closed
State-Changed-By: ed
State-Changed-When: Sun Oct 25 23:36:11 PST 1998
State-Changed-Why:

This was a design decision regarding how initArgs should
be parsed, since in some cases (windows directories) it
would be reasonable to have an entry end with a '\' without
that indicating that the next line should be combined
with it.

As such, it's not technically a bug; if you'd like to
present different opinions as to how configurations should
be parsed, you can do so on the Java-Apache list...

(I seem to remember that you did -- if not you, someone
else brought up this same issue w/ a similar example. :)

-Ed, trying to clean out the bugdb
Release-Changed-From-To: 1.3.1-
Release-Changed-By: ed
Release-Changed-When: Sun Oct 25 23:36:11 PST 1998
>Unformatted:
[In order for any reply to be added to the PR database, ]
[you need to include <apbugs@Apache.Org> in the Cc line ]
[and leave the subject line UNCHANGED.  This is not done]
[automatically because of the potential for mail loops. ]
[If you do not include this Cc, your reply may be ig-   ]
[nored unless you are responding to an explicit request ]
[from a developer.                                      ]
[Reply only with text; DO NOT SEND ATTACHMENTS!         ]



