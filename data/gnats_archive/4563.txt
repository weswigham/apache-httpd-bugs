Received: (qmail 6182 invoked by uid 2012); 10 Jun 1999 21:19:22 -0000
Message-Id: <19990610211922.6181.qmail@hyperreal.org>
Date: 10 Jun 1999 21:19:22 -0000
From: Archie Cobbs <archie@whistle.com>
Reply-To: archie@whistle.com
To: apbugs@hyperreal.org
Subject: [PATCH] add squid-like redirector process capability to apache proxy server
X-Send-Pr-Version: 3.2

>Number:         4563
>Category:       mod_proxy
>Synopsis:       [PATCH] add squid-like redirector process capability to apache proxy server
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    apache
>State:          open
>Class:          change-request
>Submitter-Id:   apache
>Arrival-Date:   Thu Jun 10 14:20:00 PDT 1999
>Last-Modified:  Fri Jun 11 17:10:00 PDT 1999
>Originator:     archie@whistle.com
>Organization:
apache
>Release:        1.3.6
>Environment:
FreeBSD 3.1 i386
>Description:
Squid allows a separate process to inspect each URL requested to the proxy
server, and optionaly redirect that request to an error page, etc. Apache's
proxy server lacks this capability, so I added it. The redirector must accept
connections to a UNIX domain socket of the form:

  URL ip-address/FQDN ident method

(same as the Squid redirector). It then responds either with a blank line
(for no change) or else an error code, colon, and new URL. For example:

  301:http://www.foo.com/accessdenied.html

Notes.. tried to keep the code close to Apache style but it may not be perfect.
Also, the new file (proxy_redirect.c) is submitted under Whistle's standard
copyright, which is vanilla BSD-style and should be consistent with the Apache
copyright.

I don't know if Windows or other unusual operating systems support UNIX domain
sockets or not, so this may or may not work on those systems.

I would also love feedback about any stupidity/bugs found.
>How-To-Repeat:

>Fix:
I can't cram the patch into this tiny textarea window.. perhaps someone can
manually reply to send-pr with the patch included so it's on record.

For now, it's available at:

  ftp://ftp.whistle.com/pub/archie/misc/apache.dif

>Audit-Trail:

From: Archie Cobbs <archie@whistle.com>
To: apbugs@hyperreal.org, apache-bugdb@apache.org
Cc:  Subject: Re: mod_proxy/4563: [PATCH] add squid-like redirector process capability to apache proxy server
Date: Thu, 10 Jun 1999 14:22:01 -0700 (PDT)

 OK, here is the actual patch...
 
 -Archie
 
 ___________________________________________________________________________
 Archie Cobbs   *   Whistle Communications, Inc.  *   http://www.whistle.com
 
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/Makefile.tmpl apache_1.3.6/src/modules/proxy/Makefile.tmpl
 *** apache_1.3.6.orig/src/modules/proxy/Makefile.tmpl	Sun Sep  6 23:59:34 1998
 --- apache_1.3.6/src/modules/proxy/Makefile.tmpl	Thu Jun 10 13:23:35 1999
 ***************
 *** 3,12 ****
   
   OBJS=\
        mod_proxy.o \
 !      proxy_cache.o proxy_connect.o proxy_ftp.o proxy_http.o proxy_util.o
   OBJS_PIC=\
        mod_proxy.lo \
 !      proxy_cache.lo proxy_connect.lo proxy_ftp.lo proxy_http.lo proxy_util.lo
   
   all: lib
   
 --- 3,14 ----
   
   OBJS=\
        mod_proxy.o \
 !      proxy_cache.o proxy_connect.o proxy_ftp.o proxy_http.o proxy_util.o \
 !      proxy_redirect.o
   OBJS_PIC=\
        mod_proxy.lo \
 !      proxy_cache.lo proxy_connect.lo proxy_ftp.lo proxy_http.lo proxy_util.lo \
 !      proxy_redirect.lo
   
   all: lib
   
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/mod_proxy.c apache_1.3.6/src/modules/proxy/mod_proxy.c
 *** apache_1.3.6.orig/src/modules/proxy/mod_proxy.c	Wed Mar 10 09:42:46 1999
 --- apache_1.3.6/src/modules/proxy/mod_proxy.c	Thu Jun 10 13:23:35 1999
 ***************
 *** 236,243 ****
 --- 236,248 ----
   static void proxy_init(server_rec *r, pool *p)
   {
       ap_proxy_garbage_init(r, p);
 +     ap_proxy_redirect_init(r, p);
   }
   
 + static void proxy_child_init(server_rec *r, pool *p)
 + {
 +     ap_proxy_redirect_child_init(r, p);
 + }
   
   
   /* Send a redirection if the request contains a hostname which is not */
 ***************
 *** 413,423 ****
 --- 418,432 ----
       ps->raliases = ap_make_array(p, 10, sizeof(struct proxy_alias));
       ps->noproxies = ap_make_array(p, 10, sizeof(struct noproxy_entry));
       ps->dirconn = ap_make_array(p, 10, sizeof(struct dirconn_entry));
 +     ps->noredir = ap_make_array(p, 10, sizeof(struct dirconn_entry));
       ps->nocaches = ap_make_array(p, 10, sizeof(struct nocache_entry));
       ps->allowed_connect_ports = ap_make_array(p, 10, sizeof(int));
       ps->domain = NULL;
       ps->viaopt = via_off; /* initially backward compatible with 1.3.1 */
       ps->req = 0;
 +     ps->redirector_cmd = NULL;
 +     ps->redirector_sock = NULL;
 +     ps->redirector_fp = NULL;
   
       ps->cache.root = NULL;
       ps->cache.space = DEFAULT_CACHE_SPACE;
 ***************
 *** 554,581 ****
       return NULL;
   }
   
 - /* Similar to set_proxy_exclude(), but defining directly connected hosts,
 -  * which should never be accessed via the configured ProxyRemote servers
 -  */
   static const char *
 !      set_proxy_dirconn(cmd_parms *parms, void *dummy, char *arg)
   {
 -     server_rec *s = parms->server;
 -     proxy_server_conf *conf =
 -     ap_get_module_config(s->module_config, &proxy_module);
       struct dirconn_entry *New;
 !     struct dirconn_entry *list = (struct dirconn_entry *) conf->dirconn->elts;
       int found = 0;
       int i;
   
       /* Don't duplicate entries */
 !     for (i = 0; i < conf->dirconn->nelts; i++) {
   	if (strcasecmp(arg, list[i].name) == 0)
   	    found = 1;
       }
   
       if (!found) {
 ! 	New = ap_push_array(conf->dirconn);
   	New->name = arg;
   	New->hostentry = NULL;
   
 --- 563,584 ----
       return NULL;
   }
   
   static const char *
 !    set_proxy_dirconn_element(cmd_parms *parms, array_header *ary, char *arg)
   {
       struct dirconn_entry *New;
 !     struct dirconn_entry *list = (struct dirconn_entry *) ary->elts;
       int found = 0;
       int i;
   
       /* Don't duplicate entries */
 !     for (i = 0; i < ary->nelts; i++) {
   	if (strcasecmp(arg, list[i].name) == 0)
   	    found = 1;
       }
   
       if (!found) {
 ! 	New = ap_push_array(ary);
   	New->name = arg;
   	New->hostentry = NULL;
   
 ***************
 *** 607,612 ****
 --- 610,639 ----
       return NULL;
   }
   
 + /* Similar to set_proxy_exclude(), but defining directly connected hosts,
 +  * which should never be accessed via the configured ProxyRemote servers
 +  */
 + static const char *
 +      set_proxy_dirconn(cmd_parms *parms, void *dummy, char *arg)
 + {
 +     proxy_server_conf *conf =
 + 	ap_get_module_config(parms->server->module_config, &proxy_module);
 + 
 +     return set_proxy_dirconn_element(parms, conf->dirconn, arg);
 + }
 + 
 + /* 
 +  * Define a host that should never be redirected via the redirector
 +  */
 + static const char *
 +      set_proxy_noredir(cmd_parms *parms, void *dummy, char *arg)
 + {
 +     proxy_server_conf *conf =
 + 	ap_get_module_config(parms->server->module_config, &proxy_module);
 + 
 +     return set_proxy_dirconn_element(parms, conf->noredir, arg);
 + }
 + 
   static const char *
        set_proxy_domain(cmd_parms *parms, void *dummy, char *arg)
   {
 ***************
 *** 823,828 ****
 --- 850,877 ----
       return NULL;    
   }
   
 + static const char *
 +      set_redirector(cmd_parms *parms, void *dummy, char *arg)
 + {
 +     proxy_server_conf *psf =
 +     ap_get_module_config(parms->server->module_config, &proxy_module);
 + 
 +     psf->redirector_cmd = arg;
 + 
 +     return NULL;
 + }
 + 
 + static const char *
 +      set_redirector_socket(cmd_parms *parms, void *dummy, char *arg)
 + {
 +     proxy_server_conf *psf =
 +     ap_get_module_config(parms->server->module_config, &proxy_module);
 + 
 +     psf->redirector_sock = arg;
 + 
 +     return NULL;
 + }
 + 
   static const handler_rec proxy_handlers[] =
   {
       {"proxy-server", proxy_handler},
 ***************
 *** 871,876 ****
 --- 920,931 ----
        "Force a http cache completion after this percentage is loaded"},
       {"ProxyVia", set_via_opt, NULL, RSRC_CONF, TAKE1,
        "Configure Via: proxy header header to one of: on | off | block | full"},
 +     {"ProxyRedirector", set_redirector, NULL, RSRC_CONF, TAKE1,
 +      "Command to run as a squid-like redirector process"},
 +     {"ProxyRedirectorSocket", set_redirector_socket, NULL, RSRC_CONF, TAKE1,
 +      "UNIX domain socket for the redirector process"},
 +     {"ProxyRedirectNever", set_proxy_noredir, NULL, RSRC_CONF, ITERATE,
 +      "A list of domains, hosts, or subnets that should not be redirected"},
       {NULL}
   };
   
 ***************
 *** 892,898 ****
       proxy_fixup,		/* pre-run fixups */
       NULL,			/* logger */
       NULL,			/* header parser */
 !     NULL,			/* child_init */
       NULL,			/* child_exit */
       proxy_detect		/* post read-request */
   };
 --- 947,953 ----
       proxy_fixup,		/* pre-run fixups */
       NULL,			/* logger */
       NULL,			/* header parser */
 !     proxy_child_init,		/* child_init */
       NULL,			/* child_exit */
       proxy_detect		/* post read-request */
   };
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/mod_proxy.h apache_1.3.6/src/modules/proxy/mod_proxy.h
 *** apache_1.3.6.orig/src/modules/proxy/mod_proxy.h	Sun Feb  7 12:48:31 1999
 --- apache_1.3.6/src/modules/proxy/mod_proxy.h	Thu Jun 10 13:23:35 1999
 ***************
 *** 209,214 ****
 --- 209,215 ----
       array_header *raliases;
       array_header *noproxies;
       array_header *dirconn;
 +     array_header *noredir;
       array_header *nocaches;
       array_header *allowed_connect_ports;
       char *domain;		/* domain name to use in absence of a domain name in the request */
 ***************
 *** 220,225 ****
 --- 221,231 ----
         via_full
       } viaopt;                   /* how to deal with proxy Via: headers */
       size_t recv_buffer_size;
 + 
 +     /* Redirector info */
 +     char *redirector_cmd;	/* squid-like redirector process pathname */
 +     char *redirector_sock;	/* socket to talk to the redirector */
 +     FILE *redirector_fp;	/* redirector communications stream */
   } proxy_server_conf;
   
   struct hdr_entry {
 ***************
 *** 267,272 ****
 --- 273,285 ----
   		       const int is_HTTP1, int nocache);
   void ap_proxy_garbage_coll(request_rec *r);
   
 + /* proxy_redirect.c */
 + 
 + int ap_proxy_redirect_init(server_rec *r, pool *p);
 + int ap_proxy_redirect_child_init(server_rec *r, pool *p);
 + int ap_proxy_redirect_req(request_rec *r,
 + 			proxy_server_conf *conf, const char *url);
 + 
   /* proxy_connect.c */
   
   int ap_proxy_connect_handler(request_rec *r, cache_req *c, char *url,
 ***************
 *** 292,297 ****
 --- 305,311 ----
   		     int isenc);
   char *ap_proxy_canon_netloc(pool *p, char **const urlp, char **userp,
   			 char **passwordp, char **hostp, int *port);
 + const char *ap_proxy_get_host_of_request(request_rec *r);
   const char *ap_proxy_date_canon(pool *p, const char *x);
   table *ap_proxy_read_headers(request_rec *r, char *buffer, int size, BUFF *f);
   long int ap_proxy_send_fb(BUFF *f, request_rec *r, cache_req *c);
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/proxy_redirect.c apache_1.3.6/src/modules/proxy/proxy_redirect.c
 *** apache_1.3.6.orig/src/modules/proxy/proxy_redirect.c	Wed Dec 31 16:00:00 1969
 --- apache_1.3.6/src/modules/proxy/proxy_redirect.c	Thu Jun 10 13:11:55 1999
 ***************
 *** 0 ****
 --- 1,356 ----
 + 
 + /*
 +  * proxy_redirect.c
 +  *
 +  * Copyright (c) 1999 Whistle Communications, Inc.
 +  * All rights reserved.
 +  * 
 +  * Subject to the following obligations and disclaimer of warranty, use and
 +  * redistribution of this software, in source or object code forms, with or
 +  * without modifications are expressly permitted by Whistle Communications;
 +  * provided, however, that:
 +  * 1. Any and all reproductions of the source or object code must include the
 +  *    copyright notice above and the following disclaimer of warranties; and
 +  * 2. No rights are granted, in any manner or form, to use Whistle
 +  *    Communications, Inc. trademarks, including the mark "WHISTLE
 +  *    COMMUNICATIONS" on advertising, endorsements, or otherwise except as
 +  *    such appears in the above copyright notice or in the software.
 +  * 
 +  * THIS SOFTWARE IS BEING PROVIDED BY WHISTLE COMMUNICATIONS "AS IS", AND
 +  * TO THE MAXIMUM EXTENT PERMITTED BY LAW, WHISTLE COMMUNICATIONS MAKES NO
 +  * REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED, REGARDING THIS SOFTWARE,
 +  * INCLUDING WITHOUT LIMITATION, ANY AND ALL IMPLIED WARRANTIES OF
 +  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT.
 +  * WHISTLE COMMUNICATIONS DOES NOT WARRANT, GUARANTEE, OR MAKE ANY
 +  * REPRESENTATIONS REGARDING THE USE OF, OR THE RESULTS OF THE USE OF THIS
 +  * SOFTWARE IN TERMS OF ITS CORRECTNESS, ACCURACY, RELIABILITY OR OTHERWISE.
 +  * IN NO EVENT SHALL WHISTLE COMMUNICATIONS BE LIABLE FOR ANY DAMAGES
 +  * RESULTING FROM OR ARISING OUT OF ANY USE OF THIS SOFTWARE, INCLUDING
 +  * WITHOUT LIMITATION, ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 +  * PUNITIVE, OR CONSEQUENTIAL DAMAGES, PROCUREMENT OF SUBSTITUTE GOODS OR
 +  * SERVICES, LOSS OF USE, DATA OR PROFITS, HOWEVER CAUSED AND UNDER ANY
 +  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 +  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 +  * THIS SOFTWARE, EVEN IF WHISTLE COMMUNICATIONS IS ADVISED OF THE POSSIBILITY
 +  * OF SUCH DAMAGE.
 +  *
 +  * Author: Archie Cobbs <archie@whistle.com>
 +  *
 +  * $Id: proxy_redirect.c,v 1.14 1999/06/10 20:11:55 archie Exp $
 +  */
 + 
 + /*
 +  * Support for utilizing a Squid-like redirector, which is a process that
 +  * accepts UNIX domain socket connections and from them reads single lines
 +  * (one at a time) of the form:
 +  *
 +  *    URL ip-address/FQDN ident method
 +  *
 +  * The FQDN and ident may be "-" if they are not known. The method is one
 +  * of "GET", "POST", etc. The redirector responds with a line of the form
 +  *
 +  *    status:URL
 +  *
 +  * (ie, a redirection) or else a blank line for no redirection. The status
 +  * must be a 300 series HTTP redirect code.
 +  *
 +  * Note that when the redirector is first started, Apache will send it
 +  * a query with no content (zero bytes) to make sure it can connect
 +  * and the redirector is alive. The redirector should properly handle
 +  * this (and any other kind of bogus query as well).
 +  */
 + 
 + #include "mod_proxy.h"
 + #include "http_conf_globals.h"
 + #include "http_log.h"
 + #include "http_main.h"
 + #include "http_core.h"
 + 
 + #include <sys/types.h>
 + #include <sys/socket.h>
 + #include <sys/un.h>
 + 
 + /*
 +  * DEFINITIONS
 +  */
 + 
 +   /* Maximum time (in seconds) we'll wait for the redirector process to
 +      come alive and start accepting socket connections */
 +   #define REDIR_MAX_WAIT	10
 + 
 + /*
 +  * INTERNAL FUNCTIONS
 +  */
 + 
 +   static int	proxy_redirect_read(request_rec *r, proxy_server_conf *conf);
 +   static int	start_redirector(void *arg, child_info *info);
 +   static FILE	*redir_connect(server_rec *r, pool *p,
 + 			const char *path, int testOnly);
 + 
 + /*
 +  * INTERNAL VARIABLES
 +  */
 + 
 +   static FILE	*redir;		/* this process' connection to the redirector */
 + 
 + /*
 +  * Initialize the redirector subsystem for the main process.
 +  */
 + 
 + int
 + ap_proxy_redirect_init(server_rec *r, pool *p)
 + {
 +     proxy_server_conf *conf =
 +     (proxy_server_conf *) ap_get_module_config(r->module_config, &proxy_module);
 +     static int initialized;
 +     FILE *fp;
 +     int k;
 + 
 +     /* If no redirector has been configured, nothing to do here */
 +     if (conf->redirector_cmd == NULL)
 + 	return(0);
 + 
 +     /* Apache initializes all modules twice. We only want to fire off one
 +        redirector, and we want it to have the same UID/GID as Apache, so
 +        wait for the second initialization before doing anything. */
 +     if (initialized++ != 1)
 + 	return(0);
 + 
 +     /* Make sure a socket pathname was specified */
 +     if (conf->redirector_sock == NULL) {
 + 	ap_log_error(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
 + 	    "ProxyRedirect specified without specifying ProxyRedirectSocket");
 + 	exit(1);
 +     }
 + 
 +     /* Fire off the redirector (only once from the main process) */
 +     if (ap_spawn_child(p, start_redirector, conf->redirector_cmd,
 + 	    kill_always, NULL, NULL, NULL) == 0) {
 + 	ap_log_error(APLOG_MARK, APLOG_ERR, r,
 + 	    "proxy: error spawning redirector process");
 + 	exit(1);
 +     }
 +     ap_log_error(APLOG_MARK, APLOG_NOTICE|APLOG_NOERRNO, r,
 + 	"proxy: successfully spawned redirector process");
 + 
 +     /* Wait for it to come alive and start accepting connections */
 +     for (k = 0; k < REDIR_MAX_WAIT; k++) {
 + 	if ((fp = redir_connect(r, p, conf->redirector_sock, 1)) != NULL) {
 + 	    ap_pfclose(p, fp);
 + 	    return(0);
 + 	}
 + 	sleep(1);
 +     }
 + 
 +     /* It never did */
 +     ap_log_error(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
 + 	"proxy: redirector process never came alive");
 +     ap_destroy_pool(p);			/* kill off redirector process */
 +     exit(1);
 + }
 + 
 + /*
 +  * Exec to become the redirector process. Called by ap_spawn_child().
 +  */
 + 
 + static int
 + start_redirector(void *arg, child_info *info)
 + {
 +     char *s, *cmd = (char *) arg;
 +     char *av[2];
 + 
 +     if ((s = strrchr(cmd, '/')) != NULL)
 +       av[0] = s + 1;
 +     else
 +       av[0] = cmd;
 +     av[1] = NULL;
 + #ifdef DEBUG_REDIRECTOR
 +     fprintf(stderr, "%s: exec %s...\n", __FUNCTION__, cmd);
 + #endif
 +     execvp(cmd, av);
 + #ifdef DEBUG_REDIRECTOR
 +     fprintf(stderr, "%s: exec of %s failed: %s\n",
 + 	__FUNCTION__, cmd, strerror(errno));
 + #endif
 +     exit(errno);
 + }
 + 
 + /*
 +  * Initialize the redirector subsystem for a child process.
 +  * Here we just connect to the redirector socket.
 +  */
 + 
 + int
 + ap_proxy_redirect_child_init(server_rec *r, pool *p)
 + {
 +     proxy_server_conf *conf =
 +     (proxy_server_conf *) ap_get_module_config(r->module_config, &proxy_module);
 + 
 +     /* If no redirector socket configured or we're already
 +        initialized, then there is nothing to do */
 +     if (conf->redirector_sock == NULL || redir != NULL)
 +         return(0);
 + 
 +     /* Connect to redirector */
 +     if ((redir = redir_connect(r, p, conf->redirector_sock, 0)) == NULL) {
 + 	ap_log_error(APLOG_MARK, APLOG_ERR, r,
 + 	    "proxy: connection to redirector failed");
 + 	sleep(5);		/* avoid fork() spin loop */
 + 	exit(1);
 +     }
 +     return(0);
 + }
 + 
 + /*
 +  * Connect to the redirector socket.
 +  */
 + 
 + static FILE *
 + redir_connect(server_rec *r, pool *p, const char *path, int testOnly)
 + {
 +     struct sockaddr_un un;
 +     int sock;
 +     FILE *fp;
 + 
 +     /* Get a UNIX domain socket */
 +     if ((sock = socket(PF_LOCAL, SOCK_STREAM, 0)) < 0) {
 + 	ap_log_error(APLOG_MARK, APLOG_ERR, r,
 + 	    "proxy: socket for redirector failed");
 + 	return NULL;
 +     }
 + 
 +     /* Connect to redirector */
 +     memset(&un, 0, sizeof(un));
 +     un.sun_family = PF_LOCAL;
 +     un.sun_len = 2 + strlen(path);
 +     strncpy(un.sun_path, path, sizeof(un.sun_path));
 +     if (connect(sock, (struct sockaddr *)&un, un.sun_len) < 0) {
 + 	if (!testOnly)
 + 	    ap_log_error(APLOG_MARK, APLOG_ERR, r,
 + 		"proxy: connect to redirector failed");
 + 	close(sock);
 + 	return NULL;
 +     }
 + 
 +     /* Open a stream on top */
 +     if ((fp = ap_pfdopen(p, sock, "r+")) == NULL) {
 + 	ap_log_error(APLOG_MARK, APLOG_ERR, r,
 + 	    "proxy: redirector fdopen() failed");
 + 	close(sock);
 + 	return NULL;
 +     }
 +     setvbuf(fp, NULL, _IOLBF, 0);		/* make it line buffered */
 +     return(fp);
 + }
 + 
 + /*
 +  * Determine if we should redirect the URL by asking the redirector,
 +  * if applicable.
 +  */
 + 
 + int
 + ap_proxy_redirect_req(request_rec *r, proxy_server_conf *conf, const char *url)
 + {
 +     struct dirconn_entry *list = (struct dirconn_entry *) conf->noredir->elts;
 +     const char *host, *logname, *err;
 +     struct hostent hent;
 +     int k, status;
 + 
 +     /* If no redirector configured, no redirection */
 +     if (conf->redirector_cmd == NULL)
 + 	return DECLINED;
 + 
 +     /* Check URI's destination host against NoRedirect hosts */
 +     for (k = 0; k < conf->noredir->nelts; k++) {
 + 	if (list[k].matcher(&list[k], r))
 + 	    return DECLINED;
 +     }
 + 
 +     /* Get info we need for the redirector query */
 +     host = ap_proxy_get_host_of_request(r);
 +     if ((err = ap_proxy_host2addr(host, &hent)) != NULL)
 + 	return ap_proxyerror(r, SERVER_ERROR, err);
 +     if ((logname = r->connection->user) == NULL)
 + 	logname = "-";
 + 
 + #ifdef DEBUG_REDIRECTOR
 +     fprintf(stderr, "QUERY: %s %s/%s %s %s\n",
 + 	url, inet_ntoa(*((struct in_addr *) hent.h_addr_list[0])),
 + 	ap_proxy_get_host_of_request(r), logname, r->method);
 +     ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r,
 + 	"QUERY: %s %s/%s %s %s",
 + 	url, inet_ntoa(*((struct in_addr *) hent.h_addr_list[0])),
 + 	ap_proxy_get_host_of_request(r), logname, r->method);
 + #endif
 + 
 +     /* Ask the redirector */
 +     fprintf(redir, "%s %s/%s %s %s\n",
 + 	url, inet_ntoa(*((struct in_addr *) hent.h_addr_list[0])),
 + 	ap_proxy_get_host_of_request(r), logname, r->method);
 +     if ((status = proxy_redirect_read(r, conf)) == SERVER_ERROR)
 + 	return ap_proxyerror(r, SERVER_ERROR,
 + 	    "Redirector communications failure");
 +     return status;
 + }
 + 
 + /*
 +  * Read an URL back from the redirector. Returns:
 +  *
 +  * SERVER_ERROR	If there was a tragic error
 +  * DECLINED	If an empty line was returned
 +  * HTTP code	If an HTTP redirect code (plus an URL) was returned
 +  */
 + 
 + static int
 + proxy_redirect_read(request_rec *r, proxy_server_conf *conf)
 + {
 +     char buf[8192];		/* XXX bad: fixed size buffer */
 +     unsigned int status = 0;
 +     int ch, len;
 + 
 +     /* Read a one-line response */
 +     if (fgets(buf, sizeof(buf), redir) == NULL) {
 + 	const int eof = feof(redir);
 + 
 + #ifdef DEBUG_REDIRECTOR
 + 	fprintf(stderr, "RESPN: %s", "NULL!\n");
 + 	ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r,
 + 	    "RESPN: %s", "NULL!");
 + #endif
 + 
 + 	/* Log error and die */
 + 	ap_log_rerror(APLOG_MARK, eof ? (APLOG_ERR|APLOG_NOERRNO) : APLOG_ERR,
 + 	    r, "proxy: %s reading redirector response", eof ? "EOF" : "error");
 + 	exit(1);
 +     }
 + 
 + #ifdef DEBUG_REDIRECTOR
 +     fprintf(stderr, "RESPN: %s", buf);
 +     ap_log_rerror(APLOG_MARK, APLOG_DEBUG|APLOG_NOERRNO, r, "RESPN: %s", buf);
 + #endif
 + 
 +     /* Check for buffer overflow */
 +     len = strlen(buf);
 +     if (buf[len - 1] != '\n') {
 + 	ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
 + 	    "proxy: redirector response too long");
 + 	while ((ch = getc(redir)) != EOF && ch != '\n')
 + 	    ;
 + 	return SERVER_ERROR;
 +     }
 +     buf[len - 1] = '\0';
 + 
 +     /* Empty line? That means 'no change' */
 +     if (*buf == '\0')
 + 	return DECLINED;
 + 
 +     /* Get response code prefix and set redirect */
 +     if (sscanf(buf, "%3u:", &status) != 1 || !ap_is_HTTP_REDIRECT(status)) {
 + 	ap_log_rerror(APLOG_MARK, APLOG_ERR|APLOG_NOERRNO, r,
 + 	    "proxy: redirector returned code %u", status);
 + 	return SERVER_ERROR;
 +     }
 +     ap_table_setn(r->headers_out, "Location", ap_pstrdup(r->pool, buf + 4));
 +     return status;
 + }
 + 
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/proxy_util.c apache_1.3.6/src/modules/proxy/proxy_util.c
 *** apache_1.3.6.orig/src/modules/proxy/proxy_util.c	Wed Mar 10 09:42:46 1999
 --- apache_1.3.6/src/modules/proxy/proxy_util.c	Thu Jun 10 13:23:35 1999
 ***************
 *** 887,894 ****
       return NULL;
   }
   
 ! static const char *
 !      proxy_get_host_of_request(request_rec *r)
   {
       char *url, *user = NULL, *password = NULL, *err, *host;
       int port = -1;
 --- 887,894 ----
       return NULL;
   }
   
 ! const char *
 !      ap_proxy_get_host_of_request(request_rec *r)
   {
       char *url, *user = NULL, *password = NULL, *err, *host;
       int port = -1;
 ***************
 *** 1025,1031 ****
       struct in_addr *ip_list;
       char **ip_listptr;
       const char *found;
 !     const char *host = proxy_get_host_of_request(r);
   
       if (host == NULL)   /* oops! */
          return 0;
 --- 1025,1031 ----
       struct in_addr *ip_list;
       char **ip_listptr;
       const char *found;
 !     const char *host = ap_proxy_get_host_of_request(r);
   
       if (host == NULL)   /* oops! */
          return 0;
 ***************
 *** 1130,1136 ****
   /* Return TRUE if host "host" is in domain "domain" */
   static int proxy_match_domainname(struct dirconn_entry *This, request_rec *r)
   {
 !     const char *host = proxy_get_host_of_request(r);
       int d_len = strlen(This->name), h_len;
   
       if (host == NULL)		/* some error was logged already */
 --- 1130,1136 ----
   /* Return TRUE if host "host" is in domain "domain" */
   static int proxy_match_domainname(struct dirconn_entry *This, request_rec *r)
   {
 !     const char *host = ap_proxy_get_host_of_request(r);
       int d_len = strlen(This->name), h_len;
   
       if (host == NULL)		/* some error was logged already */
 ***************
 *** 1186,1192 ****
   static int proxy_match_hostname(struct dirconn_entry *This, request_rec *r)
   {
       char *host = This->name;
 !     const char *host2 = proxy_get_host_of_request(r);
       int h2_len;
       int h1_len;
   
 --- 1186,1192 ----
   static int proxy_match_hostname(struct dirconn_entry *This, request_rec *r)
   {
       char *host = This->name;
 !     const char *host2 = ap_proxy_get_host_of_request(r);
       int h2_len;
       int h1_len;
   
 ***************
 *** 1224,1230 ****
   /* Return TRUE if string "str2" occurs literally in "str1" */
   static int proxy_match_word(struct dirconn_entry *This, request_rec *r)
   {
 !     const char *host = proxy_get_host_of_request(r);
       return host != NULL && strstr(host, This->name) != NULL;
   }
   
 --- 1224,1230 ----
   /* Return TRUE if string "str2" occurs literally in "str1" */
   static int proxy_match_word(struct dirconn_entry *This, request_rec *r)
   {
 !     const char *host = ap_proxy_get_host_of_request(r);
       return host != NULL && strstr(host, This->name) != NULL;
   }
   

From: Archie Cobbs <archie@whistle.com>
To: apbugs@hyperreal.org, apache-bugdb@apache.org
Cc:  Subject: Re: mod_proxy/4563: [PATCH] add squid-like redirector process capability to apache proxy server
Date: Fri, 11 Jun 1999 13:52:27 -0700 (PDT)

 Oops! In stripping out some Whistle-specific stuff, I inadvertently
 omitted a small but important part of the patch to mod_proxy.c..
 it's included below.
 
 -Archie
 
 ___________________________________________________________________________
 Archie Cobbs   *   Whistle Communications, Inc.  *   http://www.whistle.com
 
 diff -C3 --unidirectional-new-file -r apache_1.3.6.orig/src/modules/proxy/mod_proxy.c apache_1.3.6/src/modules/proxy/mod_proxy.c
 *** apache_1.3.6.orig/src/modules/proxy/mod_proxy.c	Wed Mar 10 09:42:46 1999
 --- apache_1.3.6/src/modules/proxy/mod_proxy.c	Fri Jun 11 13:49:54 1999
 ***************
 *** 323,328 ****
 --- 328,337 ----
       if (p == NULL)
   	return HTTP_BAD_REQUEST;
   
 +     rc = ap_proxy_redirect_req(r, conf, url);
 +     if (rc != DECLINED)
 +        return rc;
 + 
       rc = ap_proxy_cache_check(r, url, &conf->cache, &cr);
       if (rc != DECLINED)
   	return rc;
>Unformatted:
[In order for any reply to be added to the PR database, you need]
[to include <apbugs@Apache.Org> in the Cc line and make sure the]
[subject line starts with the report component and number, with ]
[or without any 'Re:' prefixes (such as "general/1098:" or      ]
["Re: general/1098:").  If the subject doesn't match this       ]
[pattern, your message will be misfiled and ignored.  The       ]
["apbugs" address is not added to the Cc line of messages from  ]
[the database automatically because of the potential for mail   ]
[loops.  If you do not include this Cc, your reply may be ig-   ]
[nored unless you are responding to an explicit request from a  ]
[developer.  Reply only with text; DO NOT SEND ATTACHMENTS!     ]



