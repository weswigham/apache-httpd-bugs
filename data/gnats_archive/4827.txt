Received: (qmail 26431 invoked by uid 2012); 6 Aug 1999 03:50:49 -0000
Message-Id: <19990806035049.26430.qmail@hyperreal.org>
Date: 6 Aug 1999 03:50:49 -0000
From: Paul Matthews <plm@pcug.org.au>
Reply-To: plm@pcug.org.au
To: apbugs@hyperreal.org
Subject: A small memory leak in mod_auth_db.
X-Send-Pr-Version: 3.2

>Number:         4827
>Category:       mod_auth-any
>Synopsis:       A small memory leak in mod_auth_db.
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    apache
>State:          open
>Class:          sw-bug
>Submitter-Id:   apache
>Arrival-Date:   Thu Aug  5 22:10:02 PDT 1999
>Last-Modified:  Sun Nov 28 05:10:07 PST 1999
>Originator:     plm@pcug.org.au
>Organization:
apache
>Release:        1.2.x, 1.3.x
>Environment:
All platforms that support mod_auth_db.
>Description:
mod_auth_db.c contains the following code. The memory 
pointed to by d.data is malloc()'ed in the berkeley db
routines and is never free()'ed.

#ifdef DB2
    if (!((f->get) (f, NULL, &q, &d, 0))) {
#else
    if (!((f->get) (f, &q, &d, 0))) {
#endif
        pw = ap_palloc(r->pool, d.size + 1);
        strncpy(pw, d.data, d.size);
        pw[d.size] = '\0';      /* Terminate the string */
    }

this can be fixed with

#ifdef DB2
    if (!((f->get) (f, NULL, &q, &d, 0))) {
#else
    if (!((f->get) (f, &q, &d, 0))) {
#endif
        pw = ap_palloc(r->pool, d.size + 1);
        strncpy(pw, d.data, d.size);
        pw[d.size] = '\0';      /* Terminate the string */
        free( d.data );         /* Plug the leak --pm */
    }

No this isn't a critical problem. But it is untidy. ;-) 
10000 hits per child with 150 children. It starts to add up.
>How-To-Repeat:

>Fix:

>Audit-Trail:

From: "Ralf S. Engelschall" <rse@engelschall.com>
To: apbugs@apache.org
Cc:  Subject: Re: mod_auth-any/4827: A small memory leak in mod_auth_db.
Date: Sun, 28 Nov 1999 13:38:05 +0100

 In article <19990806035049.26430.qmail@hyperreal.org> you wrote:
  
 >>Number:         4827
 >>Category:       mod_auth-any
 >>Synopsis:       A small memory leak in mod_auth_db.
 >>Confidential:   no
 >>Severity:       non-critical
 >>Priority:       medium
 >>Responsible:    apache
 >>State:          open
 >>Class:          sw-bug
 >>Submitter-Id:   apache
 >>Arrival-Date:   Thu Aug  5 22:10:02 PDT 1999
 >>Last-Modified:
 >>Originator:     plm@pcug.org.au
 >>Organization:
 > apache
 >>Release:        1.2.x, 1.3.x
 >>Environment:
 > All platforms that support mod_auth_db.
 >>Description:
 > mod_auth_db.c contains the following code. The memory 
 > pointed to by d.data is malloc()'ed in the berkeley db
 > routines and is never free()'ed.
 > 
 > #ifdef DB2
 >     if (!((f->get) (f, NULL, &q, &d, 0))) {
 > #else
 >     if (!((f->get) (f, &q, &d, 0))) {
 > #endif
 >         pw = ap_palloc(r->pool, d.size + 1);
 >         strncpy(pw, d.data, d.size);
 >         pw[d.size] = '\0';      /* Terminate the string */
 >     }
 > 
 > this can be fixed with
 > 
 > #ifdef DB2
 >     if (!((f->get) (f, NULL, &q, &d, 0))) {
 > #else
 >     if (!((f->get) (f, &q, &d, 0))) {
 > #endif
 >         pw = ap_palloc(r->pool, d.size + 1);
 >         strncpy(pw, d.data, d.size);
 >         pw[d.size] = '\0';      /* Terminate the string */
 >         free( d.data );         /* Plug the leak --pm */
 >     }
 > 
 > No this isn't a critical problem. But it is untidy. ;-) 
 > 10000 hits per child with 150 children. It starts to add up.
 
 Hmm.... I've looked at DB 1.85 and DB 2.7.5 but I was still unable to see
 where it malloc()'s the data pointer.  I don't want to add the free() to
 mod_auth_db.c before I was able to verify this behaviour in Berkeley-DB, of
 course.  Also the man pages to not document this AFAIK. Can you give me more
 insights where it malloc()'s the stuff in Berkeley-DB and whether it is really
 _always_ malloc()'ed. I'd only a quick look at the DB code, but to me it
 looked that it at least doesn't _always_ malloc...
 
                                        Ralf S. Engelschall
                                        rse@engelschall.com
                                        www.engelschall.com
>Unformatted:
[In order for any reply to be added to the PR database, you need]
[to include <apbugs@Apache.Org> in the Cc line and make sure the]
[subject line starts with the report component and number, with ]
[or without any 'Re:' prefixes (such as "general/1098:" or      ]
["Re: general/1098:").  If the subject doesn't match this       ]
[pattern, your message will be misfiled and ignored.  The       ]
["apbugs" address is not added to the Cc line of messages from  ]
[the database automatically because of the potential for mail   ]
[loops.  If you do not include this Cc, your reply may be ig-   ]
[nored unless you are responding to an explicit request from a  ]
[developer.  Reply only with text; DO NOT SEND ATTACHMENTS!     ]



