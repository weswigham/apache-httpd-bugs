From nobody@hyperreal.com  Wed Apr  9 01:15:21 1997
Received: (from nobody@localhost)
          by hyperreal.com (8.8.4/8.8.4)
	  id BAA15892; Wed, 9 Apr 1997 01:15:21 -0700 (PDT)
Message-Id: <199704090815.BAA15892@hyperreal.com>
Date: Wed, 9 Apr 1997 01:15:21 -0700 (PDT)
From: Daniel Little <danl@escape.ca>
Reply-To: danl@escape.ca
To: apbugs@hyperreal.com
Subject: Secure CGI scripts can be run by unauthorized users
X-Send-Pr-Version: 3.2

>Number:         337
>Category:       general
>Synopsis:       Secure CGI scripts can be run by unauthorized users
>Confidential:   no
>Severity:       serious
>Priority:       medium
>Responsible:    apache
>State:          closed
>Class:          sw-bug
>Submitter-Id:   apache
>Arrival-Date:   Wed Apr  9 01:20:01 1997
>Last-Modified:  Sat Apr 19 16:13:24 PDT 1997
>Originator:     danl@escape.ca
>Organization:
>Release:        1.2bX
>Environment:
Solaris 2.5, Apache 1.2b7, gcc, although I think it is a fairly general problem
>Description:
A CGI script is in a password protected area (using .htaccess protection). Theoretically,
a user on the system could create a CGI script that executes the password protected script,
setting the correct environment variables and giving it the correct parameters that ensure
the script cannot detect that it is being run by another script rather than the httpd daemon.
I guess this is just a general problem with CGI security itself, but I wondered if anybody has
had this happen, or if there is any way to ensure that it doesn't happen. My guess is to
ensure that the parent process id of the parent process of the CGI script is the process
id logged to disk when httpd starts. Is this enough?
>How-To-Repeat:
I haven't tried this but I could fairly easily generate it if you need me to. Like I said, it is
just a general concern.
>Fix:
Just make a note in the security docs for Apache that some checking should be done
within the CGI script if it is really meant to be secure. I've not seen anything on this 
anywhere. This is even more critical if the CGI script is setuid so that it has some 
real access to the server. Really, it's probably just one of the many millions of possible
problems that are opened by providing CGI access, even through CGI wrappers
>Audit-Trail:
State-Changed-From-To: open-closed
State-Changed-By: dgaudet
State-Changed-When: Sat Apr 19 16:13:24 PDT 1997
State-Changed-Why:
Thanks for the note, but as you surmise this is just one of
the many problems with CGIs.  There's not much we can do
about it.  Aside from using something like suexec and setting
the file permissions properly there's very little you can
do to prevent spoofing of your script.

Dean
>Unformatted:


