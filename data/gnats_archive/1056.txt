From apwww@hyperreal.org  Tue Aug 26 04:30:29 1997
Received: (from apwww@localhost)
	by hyperreal.org (8.8.5/8.8.5) id EAA02508;
	Tue, 26 Aug 1997 04:30:29 -0700 (PDT)
Message-Id: <199708261130.EAA02508@hyperreal.org>
Date: Tue, 26 Aug 1997 04:30:29 -0700 (PDT)
From: Tetsuya Furukawa <tetsuya@secom-sis.co.jp>
Reply-To: tetsuya@secom-sis.co.jp
To: apbugs@hyperreal.org
Subject: USE_FLOCK_SERIALIZED_ACCEPT is no use.
X-Send-Pr-Version: 3.2

>Number:         1056
>Category:       general
>Synopsis:       USE_FLOCK_SERIALIZED_ACCEPT is no use.
>Confidential:   no
>Severity:       non-critical
>Priority:       medium
>Responsible:    apache
>State:          closed
>Class:          sw-bug
>Submitter-Id:   apache
>Arrival-Date:   Tue Aug 26 04:40:02 1997
>Last-Modified:  Sat Nov 15 18:04:07 PST 1997
>Originator:     tetsuya@secom-sis.co.jp
>Organization:
>Release:        1.2.1
>Environment:
FreeBSD 2.1.7.1-RELEASE, FreeBSD 2.2-STABLE
>Description:
If USE_FLOCK_SERIALIZED_ACCEPT is defined,
1. First, the parent will create a lock file and get the file descriptor
   associated with the file in accept_mutex_init().
2. Then, the children will intend to do flock() on the descriptor
   in accept_mutex_on() and accept_mutex_off().

The flock(lock_fd, LOCK_EX) will always success without blocking in the case.
I think it isn't the expected action.
However, it doesn't currently seem to cause any problem on FreeBSD.
>How-To-Repeat:
At the next of the line ``accept_mutex_on();'', insert
``log_printf(server_conf, "accept_mutex_on: %d", (int)getpid());''.
Then make, install and start the Apache on the FreeBSD system.
You'll see the multiple "accept_mutex_on: xxxx" in the error log
even if no client accesses the server.
>Fix:
I made a patch.
It seems to work fine on my system.
--------
--- http_main.c.original        Tue Aug 26 20:15:21 1997
+++ http_main.c Tue Aug 26 20:15:12 1997
@@ -271,7 +271,7 @@
        fprintf (stderr, "Cannot open lock file\n");
        exit (1);
     }
-    unlink(lock_fname);
+    pclosef(p, lock_fd);
 }
 
 void accept_mutex_on()
@@ -1228,6 +1228,9 @@
 void sig_term() {
     log_error("httpd: caught SIGTERM, shutting down", server_conf);
     cleanup_scoreboard();
+#if defined(USE_FLOCK_SERIALIZED_ACCEPT)
+    unlink(lock_fname);
+#endif
     ap_killpg (pgrp, SIGKILL);
     close(sd);
     exit(1);
@@ -1665,6 +1668,16 @@
     dupped_csd = -1;
     child_num = child_num_arg;
     requests_this_child = 0;
+    
+#if defined(USE_FLOCK_SERIALIZED_ACCEPT)
+    lock_fd = popenf(pconf, lock_fname, O_WRONLY, 0);
+    if (lock_fd == -1)
+    {
+       perror ("open");
+       fprintf (stderr, "Cannot open lock file\n");
+       exit (1);
+    }
+#endif
 
     reopen_scoreboard(pconf);
     (void)update_child_status(child_num, SERVER_READY, (request_rec*)NULL);
-------
>Audit-Trail:
State-Changed-From-To: open-analyzed
State-Changed-By: marc
State-Changed-When: Sun Sep  7 13:28:32 PDT 1997
State-Changed-Why:
I am unable to duplicate this problem on FreeBSD.  Are
you mounting things via NFS?

From: Marc Slemko <marcs@znep.com>
To: Apache bugs database <apbugs@apache.org>
Subject: Re: general/1056: USE_FLOCK_SERIALIZED_ACCEPT is no use. (fwd)
Date: Sun, 7 Sep 1997 21:51:41 -0600 (MDT)

 
 
 
 ---------- Forwarded message ----------
 Date: Mon, 8 Sep 1997 12:03:45 +0900
 From: Tetsuya Furukawa <tetsuya@secom-sis.co.jp>
 To: marc@hyperreal.org, apache-bugdb@apache.org, marc@apache.org
 Subject: Re: general/1056: USE_FLOCK_SERIALIZED_ACCEPT is no use.
 
 Marc Slemko wrote:
 >State-Changed-Why:
 >I am unable to duplicate this problem on FreeBSD.  Are
 >you mounting things via NFS?
 
 No, I didn't use NFS.
 I don't know why you couldn't duplicate it.
 
 The problem is neither caused by NFS, nor FreeBSD.
 The Apache's programmers seem to suppose that flock() is compatible
 with fcntl().
 However, the supposition is wrong.
 
 The following program will tell you the proper usage of flock().
 --------
 #include <sys/file.h>
 #include <sys/errno.h>
 #include <errno.h>
 #include <stdio.h>
 #include <unistd.h>
 #include <string.h>
 
 int
 main(int argc, char **argv)
 {
     int fd;
     int bad = argc >= 2 && strcmp(argv[1], "bad") == 0;
 
     if (bad)
 	fd = open("lockfile", O_WRONLY | O_CREAT, 0666);
     if (fork() == 0) {
 	/* child */
 	if (!bad)
 	    fd = open("lockfile", O_WRONLY | O_CREAT, 0666);
 	flock(fd, LOCK_EX);
 	sleep(2);
 	exit(0);
     }
 
     /* parent */
     sleep(1);
     if (!bad)
 	fd = open("lockfile", O_WRONLY);
     if (flock(fd, LOCK_EX | LOCK_NB) == -1) {
 	if (errno == EWOULDBLOCK)
 	    printf("flock works fine.\n");
 	else
 	    printf("flock fails: %s\n", strerror(errno));
     } else
 	printf("flock doesn't work.\n");
     return 0;
 }
 --------
 
 The platforms, the command lines and the corresponding outputs are below.
 
 FreeBSD | ./a.out     | locking works file.
 FreeBSD | ./a.out bad | locking doesn't work.
 Solaris | ./a.out     | locking works file.
 Solaris | ./a.out bad | locking works file.
 
 Note: Solaris's flock() seems to be using fcntl() internally,
       so it often has the funny behavior.
 
 --
 Tetsuya FURUKAWA, Tokyo, Japan.
 

From: Marc Slemko <marcs@znep.com>
To: Apache bugs database <apbugs@apache.org>
Subject: general/1056: flock locking broken
Date: Wed, 24 Sep 1997 23:14:52 -0600 (MDT)

 
 Yes, this is a problem.  I am slowly making a patch for it.  It is more
 troublesome because it requires a cleanup function be added at init time
 to prevent Apache from croaking if the lockfile exists due to an improper
 exit. 
 
 

From: tetsuya@secom-sis.co.jp (Tetsuya Furukawa)
To: apbugs@apache.org
Cc:  Subject: Re: general/1056: flock locking broken
Date: Wed, 15 Oct 1997 16:14:04 +0900

 How about to do thus:
 
  #if defined(USE_FLOCK_SERIALIZED_ACCEPT)
 +    unlink(lock_fname);
      lock_fd = popenf(pconf, lock_fname, O_WRONLY, 0);
 
 It's sufficient, maybe.
 

From: tetsuya@secom-sis.co.jp (Tetsuya Furukawa)
To: apbugs@apache.org
Cc:  Subject: Re: general/1056: flock locking broken
Date: Wed, 15 Oct 1997 17:15:56 +0900

 Sorry, it's wrong.
 
 > #if defined(USE_FLOCK_SERIALIZED_ACCEPT)
 >+    unlink(lock_fname);
 >     lock_fd = popenf(pconf, lock_fname, O_WRONLY, 0);
 
 
 The thing I'd like to say is:
 
 --- http_main.c.orig    Wed Oct 15 16:38:16 1997
 +++ http_main.c Wed Oct 15 16:59:40 1997
 @@ -264,6 +264,7 @@
  {
  
      expand_lock_fname (p);
 +    unlink(lock_fname);
      lock_fd = popenf(p, lock_fname, O_CREAT | O_WRONLY | O_EXCL, 0644);
      if (lock_fd == -1)
      {
 
State-Changed-From-To: analyzed-closed
State-Changed-By: marc
State-Changed-When: Sat Nov 15 18:04:06 PST 1997
State-Changed-Why:
A modified version of your patch has been applied to the
1.3 source tree.  Thanks very much for the report.
>Unformatted:




