Received: (qmail 16283 invoked by uid 2012); 20 Oct 1997 16:19:07 -0000
Message-Id: <19971020161907.16280.qmail@hyperreal.org>
Date: 20 Oct 1997 16:19:07 -0000
From: Steve Schall <steve@wwcd.com>
Reply-To: steve@wwcd.com
To: apbugs@hyperreal.org
Subject: Monitoring system showed system down!
X-Send-Pr-Version: 3.2

>Number:         1273
>Category:       os-solaris
>Synopsis:       Monitoring system showed system down!
>Confidential:   no
>Severity:       critical
>Priority:       medium
>Responsible:    apache
>State:          closed
>Class:          mistaken
>Submitter-Id:   apache
>Arrival-Date:   Mon Oct 20 09:20:00 PDT 1997
>Last-Modified:  Thu Nov  6 02:20:00 PST 1997
>Originator:     steve@wwcd.com
>Organization:
>Release:        1.3b2
>Environment:
Sparc 5 w/32 megs ram
Running solaris 2.5.1
Monitoring with WhatsUp from    ipswitch company
>Description:
Strange thing happened last night.
I put the 1.3b2 on our test system about 11:pm. Sparc 5 w/32 megs ram

All seemed well until about 4:am when my beeper went off
telling me the test system was down. At that time it showed the
www was out so I tried to get into the web page and it let me in.
But the monitoring system was not able to get back in.
So I put 1.2.3 back on and all was well.

Running solaris 2.5.1
Monitoring with WhatsUp from    ipswitch company

Thanks

Steve
>How-To-Repeat:
No idea.
>Fix:
No
>Audit-Trail:

From: Paul Sutton <paul@ukweb.com>
To: Steve Schall <steve@wwcd.com>
Cc: apbugs@hyperreal.org
Subject: Re: os-solaris/1273: Monitoring system showed system down!
Date: Tue, 21 Oct 1997 13:37:29 +0000 (GMT)

 Date: 20 Oct 1997 16:39:12 -0000
 From: Steve Schall <steve@wwcd.com>
 To: apbugs@hyperreal.org
 Subject: os-solaris/1274: Add to Report# 1273
 
 [Error log]
 
 [Sun Oct 19 21:28:17 1997] [notice] Apache/1.3b2 configured -- resuming
 normal operations
 [Sun Oct 19 21:28:36 1997] [error] server seems busy, spawning 4 children
 (you may need to increase StartServers, or Min/MaxSpareServers)
 [Sun Oct 19 21:28:37 1997] [error] server seems busy, spawning 8 children
 (you may need to increase StartServers, or Min/MaxSpareServers)
 [Mon Oct 20 00:01:07 1997] [error] server seems busy, spawning 4 children
 (you may need to increase StartServers, or Min/MaxSpareServers)
 [Mon Oct 20 03:49:19 1997] [notice] httpd: caught SIGTERM, shutting down
 
 Alarms went off around 3:45am
 
 Kept the same config file I was using for version 1.2.3
 Put 1.2.3 back and not problems.
 
State-Changed-From-To: open-closed
State-Changed-By: coar
State-Changed-When: Tue Oct 21 07:59:34 PDT 1997
State-Changed-Why:
If you were able to access the Web server, then Apache
was running.  If a third-party tool was unable to function,
why do you think it's Apache fault and responsibility to
fix it?  Please report this to the WhatsUp people.
Class-Changed-From-To: sw-bug-mistaken
Class-Changed-By: coar
Class-Changed-When: Tue Oct 21 07:59:34 PDT 1997

From: Dean Gaudet <dgaudet@arctic.org>
To: Steve Schall <steve@wwcd.com>
Cc: apbugs@hyperreal.org
Subject: Re: os-solaris/1273: Monitoring system showed system down!
Date: Thu, 6 Nov 1997 02:11:44 -0800 (PST)

 It turns out that this is likely an Apache bug.  You have two options if
 you want to use 1.3b2.  You can either edit main/src/conf.h, search for
 SOLARIS, and replace the USE_PTHREAD_SERIALIZED_ACCEPT definition with
 USE_FCNTL_SERIALIZED_ACCEPT.  Or you can try the included patch.  Or you
 can wait for 1.3b3. 
 
 Dean
 
 Index: http_main.c
 ===================================================================
 RCS file: /export/home/cvs/apachen/src/main/http_main.c,v
 retrieving revision 1.243
 diff -u -r1.243 http_main.c
 --- http_main.c	1997/11/03 10:11:42	1.243
 +++ http_main.c	1997/11/06 06:57:22
 @@ -333,18 +333,33 @@
  #elif defined (USE_PTHREAD_SERIALIZED_ACCEPT)
  
  /* This code probably only works on Solaris ... but it works really fast
 - * on Solaris
 + * on Solaris.  Note that pthread mutexes are *NOT* released when a task
 + * dies ... the task has to free it itself.  So we block signals and
 + * try to be nice about releasing the mutex.
   */
  
  #include <pthread.h>
  
 -static pthread_mutex_t *accept_mutex;
 +static pthread_mutex_t *accept_mutex = (void *)(caddr_t) -1;
 +static int have_accept_mutex;
 +static sigset_t accept_block_mask;
 +static sigset_t accept_previous_mask;
 +
 +static void accept_mutex_child_cleanup(void *data)
 +{
 +    if (accept_mutex != (void *)(caddr_t)-1
 +	&& have_accept_mutex) {
 +	pthread_mutex_unlock(accept_mutex);
 +    }
 +}
  
  static void accept_mutex_cleanup(void)
  {
 -    if (munmap((caddr_t) accept_mutex, sizeof(*accept_mutex))) {
 +    if (accept_mutex != (void *)(caddr_t)-1
 +	&& munmap((caddr_t) accept_mutex, sizeof(*accept_mutex))) {
  	perror("munmap");
      }
 +    accept_mutex = (void *)(caddr_t)-1;
  }
  
  static void accept_mutex_init(pool *p)
 @@ -376,14 +391,25 @@
  	perror("pthread_mutex_init");
  	exit(1);
      }
 +    sigfillset(&accept_block_mask);
 +    sigdelset(&accept_block_mask, SIGHUP);
 +    sigdelset(&accept_block_mask, SIGTERM);
 +    sigdelset(&accept_block_mask, SIGUSR1);
 +    register_cleanup(pconf, NULL, accept_mutex_child_cleanup,
 +	accept_mutex_child_cleanup);
  }
  
  static void accept_mutex_on()
  {
 +    if (sigprocmask(SIG_BLOCK, &accept_block_mask, &accept_previous_mask)) {
 +	perror("sigprocmask(SIG_BLOCK)");
 +	exit (1);
 +    }
      if (pthread_mutex_lock(accept_mutex)) {
  	perror("pthread_mutex_lock");
  	exit(1);
      }
 +    have_accept_mutex = 1;
  }
  
  static void accept_mutex_off()
 @@ -391,6 +417,24 @@
      if (pthread_mutex_unlock(accept_mutex)) {
  	perror("pthread_mutex_unlock");
  	exit(1);
 +    }
 +    /* There is a slight race condition right here... if we were to die right
 +     * now, we'd do another pthread_mutex_unlock.  Now, doing that would let
 +     * another process into the mutex.  pthread mutexes are designed to be
 +     * fast, as such they don't have protection for things like testing if the
 +     * thread owning a mutex is actually unlocking it (or even any way of
 +     * testing who owns the mutex).
 +     *
 +     * If we were to unset have_accept_mutex prior to releasing the mutex
 +     * then the race could result in the server unable to serve hits.  Doing
 +     * it this way means that the server can continue, but an additional
 +     * child might be in the critical section ... at least it's still serving
 +     * hits.
 +     */
 +    have_accept_mutex = 0;
 +    if (sigprocmask(SIG_SETMASK, &accept_previous_mask, NULL)) {
 +	perror("sigprocmask(SIG_SETMASK)");
 +	exit (1);
      }
  }
  
 
 
>Unformatted:

